// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/ObjectBox/objectBoxModels.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 1472733900799255203),
      name: 'AnneeObject',
      lastPropertyId: const IdUid(3, 421562248386418572),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4547452467411059180),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 2267727907876514598),
            name: 'valeur',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 421562248386418572),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 942012812794508196),
      name: 'ChargeExploitationObject',
      lastPropertyId: const IdUid(12, 5806719290455575316),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8223006499331393418),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 688490792830872192),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4152030563150474222),
            name: 'unite',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7687141386428847200),
            name: 'pu',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4699930183048965871),
            name: 'quantite_unite_superficie',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5727926119093593139),
            name: 'produit_id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7973948002635527460),
            name: 'produit_name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5476078719174466235),
            name: 'famille_charge_exploitation_id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 1710432431852461415),
            name: 'famille_charge_exploitation_name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 6715403605697150411),
            name: 'type_charge_exploitation_id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 6267196620263950489),
            name: 'type_charge_exploitation_name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 5806719290455575316),
            name: 'isAchat',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 7978549429537542936),
      name: 'ExploitationChargeExploitationObject',
      lastPropertyId: const IdUid(14, 5495746333903931372),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7633876656134220588),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 2265578140294888397),
            name: 'date',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7780719819921090985),
            name: 'unite',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7276144691952261185),
            name: 'pu',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8667978622813266020),
            name: 'quantite',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4961965848247327658),
            name: 'valeur',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6238493284409255179),
            name: 'observation',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4106670629010812957),
            name: 'charge_exploitation_id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 5460704053737860900),
            name: 'charge_exploitation_name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 764738161502754190),
            name: 'type_charge_exploitation_id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 9170232907785763418),
            name: 'type_charge_exploitation_name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 4623512695533286932),
            name: 'famille_exploitation_id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 2574188481725934921),
            name: 'famille_charge_exploitation_name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 5495746333903931372),
            name: 'exploitation_id',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 1952016127645859162),
      name: 'ExploitationObject',
      lastPropertyId: const IdUid(36, 134601415542067038),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4392154440654293685),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 7187993682488837808),
            name: 'producteur_id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6994300224670064359),
            name: 'prenom',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8883852308272395054),
            name: 'nom',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4023235282199773095),
            name: 'cni',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3973668425962269314),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8332487036503149799),
            name: 'is_actif',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8800295969373825888),
            name: 'op_id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 4446087021631842702),
            name: 'op_name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 1843375027359455120),
            name: 'type_op_id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 968435778515942063),
            name: 'type_op_name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 4703323281749049968),
            name: 'exploitation_id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 2833469736489789633),
            name: 'compte',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 2280360324274124435),
            name: 'unite',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 401836260047423772),
            name: 'production_prevision',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 7369312492792182497),
            name: 'superficie_prevision',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 2843296647602587087),
            name: 'pu_prevision',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 3252337172527397292),
            name: 'variete_prevision_id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 5275224505379795),
            name: 'variete_prevision_name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 1321722165463256552),
            name: 'produit_prevision_id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 1278002453140143201),
            name: 'produit_prevision_name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 3836363796363308683),
            name: 'filiere_prevision_id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(23, 1051123057921255864),
            name: 'filiere_prevision_name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(24, 1711823814110962161),
            name: 'production',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(25, 4191028435174682402),
            name: 'superficie',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(26, 2866264399576208693),
            name: 'pu',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(27, 6056867337728611406),
            name: 'variete_id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(28, 6250351877558228071),
            name: 'variete_name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(29, 2046973192867404267),
            name: 'produit_id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(30, 8746294864450256019),
            name: 'produit_name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(31, 8230740023156904081),
            name: 'filiere_id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(32, 1489426489613744531),
            name: 'filiere_name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(33, 4713826419735854494),
            name: 'annne_id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(34, 2607847453772484639),
            name: 'annee_name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(35, 8089932676608983997),
            name: 'saison_id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(36, 134601415542067038),
            name: 'saison_name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 5004975822427360449),
      name: 'FamilleChargeExploitationObject',
      lastPropertyId: const IdUid(2, 3257846613863059869),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5740058265143529746),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 3257846613863059869),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 9158898132135568858),
      name: 'OpObject',
      lastPropertyId: const IdUid(20, 3525248406515164618),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1521474201302622521),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 4904132893487981301),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6546983887072440005),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5064332327785592223),
            name: 'telephone',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2497861271631594193),
            name: 'adresse',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2762286548775179983),
            name: 'is_actif',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2594930912677065935),
            name: 'type_op_id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2285997652024290776),
            name: 'type_op_name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 2708166986575815065),
            name: 'localite_id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 3936827606133976308),
            name: 'localite_name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 3481951940575528433),
            name: 'sous_zone_id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 1028624719432842561),
            name: 'sous_zone_name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 6749936039955951226),
            name: 'zone_id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 2278965625760707253),
            name: 'zone_name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 5960842017416925470),
            name: 'departement_id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 3735675206331614398),
            name: 'departement_name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 206076343908823863),
            name: 'region_id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 7613332254121058291),
            name: 'region_name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 4140130840454948633),
            name: 'pays_id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 3525248406515164618),
            name: 'pays_name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 8063723319573467879),
      name: 'PersonneObject',
      lastPropertyId: const IdUid(4, 1252999094064422281),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1585381657853466434),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6040892431505228578),
            name: 'age',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 9175012964287734962),
            name: 'poids',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1252999094064422281),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(8, 8716512944042426771),
      name: 'ProducteurObject',
      lastPropertyId: const IdUid(10, 5037638756500276478),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4633305959212178120),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 5156124394268828733),
            name: 'prenom',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3764074814458463941),
            name: 'nom',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3780138639307226019),
            name: 'cni',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5719191411707199909),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7244902662207648211),
            name: 'op_id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3124676704704856438),
            name: 'op_name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6784544899207398164),
            name: 'type_op_id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 5160793150074111663),
            name: 'type_op_name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 5037638756500276478),
            name: 'is_actif',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(9, 7973398219536907695),
      name: 'SaisonObject',
      lastPropertyId: const IdUid(3, 2816015867175677135),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8408922368749136019),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 1643041988676828158),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2816015867175677135),
            name: 'description',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(10, 1804104496284697583),
      name: 'TypeChargeExploitationObject',
      lastPropertyId: const IdUid(2, 2650089428724267584),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4230553290177370231),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 2650089428724267584),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(11, 8843749846804323929),
      name: 'TypeChargeObject',
      lastPropertyId: const IdUid(2, 5300040244050788913),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6925196781882737392),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 5300040244050788913),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(12, 6745163259470286005),
      name: 'TypeOpObject',
      lastPropertyId: const IdUid(2, 2405611858759390705),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8457406828585008273),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 2405611858759390705),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(13, 6598424284898627806),
      name: 'UserObject',
      lastPropertyId: const IdUid(18, 5930203361176101580),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4376688263748734080),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 6439470754400898883),
            name: 'token',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5051745316431470174),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4199876060037425317),
            name: 'password',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5672659374131386494),
            name: 'firstname',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5844822653368117828),
            name: 'lastname',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5901013253194353209),
            name: 'profil_id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3028994160360075893),
            name: 'profil_name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 241198126584152695),
            name: 'producteur_id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 8518943111481203139),
            name: 'producteur_prenom',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 5199587424817436278),
            name: 'producteur_nom',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 6120274500890914333),
            name: 'producteur_cni',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 8652018008668432195),
            name: 'op_id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 2602818505930760966),
            name: 'op_name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 3186806007421556701),
            name: 'sous_zone_id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 99600319306588304),
            name: 'sous_zone_name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 2692334285427212815),
            name: 'zone_id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 5930203361176101580),
            name: 'zone_name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(14, 1094962404497349135),
      name: 'VarieteObject',
      lastPropertyId: const IdUid(11, 8142166969063476843),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2520562201321501021),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 6197603716757588984),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 218548491210859662),
            name: 'surface_unite',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4425476126643227353),
            name: 'quantite_unite',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1460415514012123091),
            name: 'rendement_unite',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8397918239341481327),
            name: 'produit_id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1596810361277545108),
            name: 'produit_name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4106140250896573752),
            name: 'filiere_id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 8850018008015678129),
            name: 'filiere_name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 4588819009712122787),
            name: 'familleemplacement_id',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 8142166969063476843),
            name: 'familleemplacement_name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(14, 1094962404497349135),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    AnneeObject: EntityDefinition<AnneeObject>(
        model: _entities[0],
        toOneRelations: (AnneeObject object) => [],
        toManyRelations: (AnneeObject object) => {},
        getId: (AnneeObject object) => object.id,
        setId: (AnneeObject object, int id) {
          object.id = id;
        },
        objectToFB: (AnneeObject object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.valeur);
          fbb.addOffset(2, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = AnneeObject(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              valeur:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''));

          return object;
        }),
    ChargeExploitationObject: EntityDefinition<ChargeExploitationObject>(
        model: _entities[1],
        toOneRelations: (ChargeExploitationObject object) => [],
        toManyRelations: (ChargeExploitationObject object) => {},
        getId: (ChargeExploitationObject object) => object.id,
        setId: (ChargeExploitationObject object, int id) {
          object.id = id;
        },
        objectToFB: (ChargeExploitationObject object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final uniteOffset = fbb.writeString(object.unite);
          final produit_nameOffset = fbb.writeString(object.produit_name);
          final famille_charge_exploitation_nameOffset =
              fbb.writeString(object.famille_charge_exploitation_name);
          final type_charge_exploitation_nameOffset =
              fbb.writeString(object.type_charge_exploitation_name);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, uniteOffset);
          fbb.addFloat64(3, object.pu);
          fbb.addFloat64(4, object.quantite_unite_superficie);
          fbb.addInt64(5, object.produit_id);
          fbb.addOffset(6, produit_nameOffset);
          fbb.addInt64(7, object.famille_charge_exploitation_id);
          fbb.addOffset(8, famille_charge_exploitation_nameOffset);
          fbb.addInt64(9, object.type_charge_exploitation_id);
          fbb.addOffset(10, type_charge_exploitation_nameOffset);
          fbb.addBool(11, object.isAchat);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ChargeExploitationObject(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              unite: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              pu: const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0),
              quantite_unite_superficie:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0),
              produit_id:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0),
              produit_name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              famille_charge_exploitation_id:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0),
              famille_charge_exploitation_name:
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 20, ''),
              type_charge_exploitation_id:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0),
              type_charge_exploitation_name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 24, ''),
              isAchat: const fb.BoolReader().vTableGet(buffer, rootOffset, 26, false));

          return object;
        }),
    ExploitationChargeExploitationObject:
        EntityDefinition<ExploitationChargeExploitationObject>(
            model: _entities[2],
            toOneRelations: (ExploitationChargeExploitationObject object) => [],
            toManyRelations: (ExploitationChargeExploitationObject object) =>
                {},
            getId: (ExploitationChargeExploitationObject object) => object.id,
            setId: (ExploitationChargeExploitationObject object, int id) {
              object.id = id;
            },
            objectToFB:
                (ExploitationChargeExploitationObject object, fb.Builder fbb) {
              final uniteOffset = fbb.writeString(object.unite);
              final observationOffset = object.observation == null
                  ? null
                  : fbb.writeString(object.observation!);
              final charge_exploitation_nameOffset =
                  fbb.writeString(object.charge_exploitation_name);
              final type_charge_exploitation_nameOffset =
                  fbb.writeString(object.type_charge_exploitation_name);
              final famille_charge_exploitation_nameOffset =
                  fbb.writeString(object.famille_charge_exploitation_name);
              fbb.startTable(15);
              fbb.addInt64(0, object.id);
              fbb.addInt64(1, object.date.millisecondsSinceEpoch);
              fbb.addOffset(2, uniteOffset);
              fbb.addFloat64(3, object.pu);
              fbb.addFloat64(4, object.quantite);
              fbb.addFloat64(5, object.valeur);
              fbb.addOffset(6, observationOffset);
              fbb.addInt64(7, object.charge_exploitation_id);
              fbb.addOffset(8, charge_exploitation_nameOffset);
              fbb.addInt64(9, object.type_charge_exploitation_id);
              fbb.addOffset(10, type_charge_exploitation_nameOffset);
              fbb.addInt64(11, object.famille_exploitation_id);
              fbb.addOffset(12, famille_charge_exploitation_nameOffset);
              fbb.addInt64(13, object.exploitation_id);
              fbb.finish(fbb.endTable());
              return object.id;
            },
            objectFromFB: (Store store, ByteData fbData) {
              final buffer = fb.BufferContext(fbData);
              final rootOffset = buffer.derefObject(0);

              final object = ExploitationChargeExploitationObject(
                  id: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 4, 0),
                  date: DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)),
                  unite: const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 8, ''),
                  pu: const fb.Float64Reader()
                      .vTableGet(buffer, rootOffset, 10, 0),
                  quantite: const fb.Float64Reader()
                      .vTableGet(buffer, rootOffset, 12, 0),
                  valeur: const fb.Float64Reader()
                      .vTableGet(buffer, rootOffset, 14, 0),
                  observation: const fb.StringReader(asciiOptimization: true)
                      .vTableGetNullable(buffer, rootOffset, 16),
                  charge_exploitation_id:
                      const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0),
                  charge_exploitation_name: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 20, ''),
                  type_charge_exploitation_id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0),
                  type_charge_exploitation_name: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 24, ''),
                  famille_exploitation_id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0),
                  famille_charge_exploitation_name: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 28, ''),
                  exploitation_id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0));

              return object;
            }),
    ExploitationObject: EntityDefinition<ExploitationObject>(
        model: _entities[3],
        toOneRelations: (ExploitationObject object) => [],
        toManyRelations: (ExploitationObject object) => {},
        getId: (ExploitationObject object) => object.id,
        setId: (ExploitationObject object, int id) {
          object.id = id;
        },
        objectToFB: (ExploitationObject object, fb.Builder fbb) {
          final prenomOffset = fbb.writeString(object.prenom);
          final nomOffset = fbb.writeString(object.nom);
          final cniOffset = fbb.writeString(object.cni);
          final emailOffset = fbb.writeString(object.email);
          final op_nameOffset = fbb.writeString(object.op_name);
          final type_op_nameOffset = fbb.writeString(object.type_op_name);
          final compteOffset = fbb.writeString(object.compte);
          final uniteOffset = fbb.writeString(object.unite);
          final variete_prevision_nameOffset =
              fbb.writeString(object.variete_prevision_name);
          final produit_prevision_nameOffset =
              fbb.writeString(object.produit_prevision_name);
          final filiere_prevision_nameOffset =
              fbb.writeString(object.filiere_prevision_name);
          final variete_nameOffset = fbb.writeString(object.variete_name);
          final produit_nameOffset = fbb.writeString(object.produit_name);
          final filiere_nameOffset = fbb.writeString(object.filiere_name);
          final annee_nameOffset = fbb.writeString(object.annee_name);
          final saison_nameOffset = fbb.writeString(object.saison_name);
          fbb.startTable(37);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.producteur_id);
          fbb.addOffset(2, prenomOffset);
          fbb.addOffset(3, nomOffset);
          fbb.addOffset(4, cniOffset);
          fbb.addOffset(5, emailOffset);
          fbb.addBool(6, object.is_actif);
          fbb.addInt64(7, object.op_id);
          fbb.addOffset(8, op_nameOffset);
          fbb.addInt64(9, object.type_op_id);
          fbb.addOffset(10, type_op_nameOffset);
          fbb.addInt64(11, object.exploitation_id);
          fbb.addOffset(12, compteOffset);
          fbb.addOffset(13, uniteOffset);
          fbb.addFloat64(14, object.production_prevision);
          fbb.addFloat64(15, object.superficie_prevision);
          fbb.addFloat64(16, object.pu_prevision);
          fbb.addInt64(17, object.variete_prevision_id);
          fbb.addOffset(18, variete_prevision_nameOffset);
          fbb.addInt64(19, object.produit_prevision_id);
          fbb.addOffset(20, produit_prevision_nameOffset);
          fbb.addInt64(21, object.filiere_prevision_id);
          fbb.addOffset(22, filiere_prevision_nameOffset);
          fbb.addFloat64(23, object.production);
          fbb.addFloat64(24, object.superficie);
          fbb.addFloat64(25, object.pu);
          fbb.addInt64(26, object.variete_id);
          fbb.addOffset(27, variete_nameOffset);
          fbb.addInt64(28, object.produit_id);
          fbb.addOffset(29, produit_nameOffset);
          fbb.addInt64(30, object.filiere_id);
          fbb.addOffset(31, filiere_nameOffset);
          fbb.addInt64(32, object.annne_id);
          fbb.addOffset(33, annee_nameOffset);
          fbb.addInt64(34, object.saison_id);
          fbb.addOffset(35, saison_nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ExploitationObject(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              producteur_id:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              prenom: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              nom: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              cni: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              is_actif: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 16, false),
              op_id:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0),
              op_name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, ''),
              type_op_id:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0),
              type_op_name: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 24, ''),
              exploitation_id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0),
              compte: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 28, ''),
              unite: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 30, ''),
              production_prevision: const fb.Float64Reader().vTableGet(buffer, rootOffset, 32, 0),
              superficie_prevision: const fb.Float64Reader().vTableGet(buffer, rootOffset, 34, 0),
              pu_prevision: const fb.Float64Reader().vTableGet(buffer, rootOffset, 36, 0),
              variete_prevision_id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 38, 0),
              variete_prevision_name: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 40, ''),
              produit_prevision_id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 42, 0),
              produit_prevision_name: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 44, ''),
              filiere_prevision_id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 46, 0),
              filiere_prevision_name: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 48, ''),
              production: const fb.Float64Reader().vTableGet(buffer, rootOffset, 50, 0),
              superficie: const fb.Float64Reader().vTableGet(buffer, rootOffset, 52, 0),
              pu: const fb.Float64Reader().vTableGet(buffer, rootOffset, 54, 0),
              variete_id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 56, 0),
              variete_name: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 58, ''),
              produit_id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 60, 0),
              produit_name: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 62, ''),
              filiere_id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 64, 0),
              filiere_name: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 66, ''),
              annne_id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 68, 0),
              annee_name: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 70, ''),
              saison_id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 72, 0),
              saison_name: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 74, ''));

          return object;
        }),
    FamilleChargeExploitationObject: EntityDefinition<
            FamilleChargeExploitationObject>(
        model: _entities[4],
        toOneRelations: (FamilleChargeExploitationObject object) => [],
        toManyRelations: (FamilleChargeExploitationObject object) => {},
        getId: (FamilleChargeExploitationObject object) => object.id,
        setId: (FamilleChargeExploitationObject object, int id) {
          object.id = id;
        },
        objectToFB: (FamilleChargeExploitationObject object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = FamilleChargeExploitationObject(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''));

          return object;
        }),
    OpObject: EntityDefinition<OpObject>(
        model: _entities[5],
        toOneRelations: (OpObject object) => [],
        toManyRelations: (OpObject object) => {},
        getId: (OpObject object) => object.id,
        setId: (OpObject object, int id) {
          object.id = id;
        },
        objectToFB: (OpObject object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final telephoneOffset = object.telephone == null
              ? null
              : fbb.writeString(object.telephone!);
          final adresseOffset =
              object.adresse == null ? null : fbb.writeString(object.adresse!);
          final type_op_nameOffset = fbb.writeString(object.type_op_name);
          final localite_nameOffset = object.localite_name == null
              ? null
              : fbb.writeString(object.localite_name!);
          final sous_zone_nameOffset = object.sous_zone_name == null
              ? null
              : fbb.writeString(object.sous_zone_name!);
          final zone_nameOffset = object.zone_name == null
              ? null
              : fbb.writeString(object.zone_name!);
          final departement_nameOffset = object.departement_name == null
              ? null
              : fbb.writeString(object.departement_name!);
          final region_nameOffset = object.region_name == null
              ? null
              : fbb.writeString(object.region_name!);
          final pays_nameOffset = object.pays_name == null
              ? null
              : fbb.writeString(object.pays_name!);
          fbb.startTable(21);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, emailOffset);
          fbb.addOffset(3, telephoneOffset);
          fbb.addOffset(4, adresseOffset);
          fbb.addBool(5, object.is_actif);
          fbb.addInt64(6, object.type_op_id);
          fbb.addOffset(7, type_op_nameOffset);
          fbb.addInt64(8, object.localite_id);
          fbb.addOffset(9, localite_nameOffset);
          fbb.addInt64(10, object.sous_zone_id);
          fbb.addOffset(11, sous_zone_nameOffset);
          fbb.addInt64(12, object.zone_id);
          fbb.addOffset(13, zone_nameOffset);
          fbb.addInt64(14, object.departement_id);
          fbb.addOffset(15, departement_nameOffset);
          fbb.addInt64(16, object.region_id);
          fbb.addOffset(17, region_nameOffset);
          fbb.addInt64(18, object.pays_id);
          fbb.addOffset(19, pays_nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = OpObject(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              telephone: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              adresse: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              is_actif: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 14, false),
              type_op_id:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0),
              type_op_name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''),
              localite_id:
                  const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20),
              localite_name: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 22),
              sous_zone_id: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 24),
              sous_zone_name: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 26),
              zone_id: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 28),
              zone_name: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 30),
              departement_id: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 32),
              departement_name: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 34),
              region_id: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 36),
              region_name: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 38),
              pays_id: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 40),
              pays_name: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 42));

          return object;
        }),
    PersonneObject: EntityDefinition<PersonneObject>(
        model: _entities[6],
        toOneRelations: (PersonneObject object) => [],
        toManyRelations: (PersonneObject object) => {},
        getId: (PersonneObject object) => object.id,
        setId: (PersonneObject object, int id) {
          object.id = id;
        },
        objectToFB: (PersonneObject object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.age);
          fbb.addInt64(2, object.poids);
          fbb.addOffset(3, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = PersonneObject(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              age: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              poids: const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''));

          return object;
        }),
    ProducteurObject: EntityDefinition<ProducteurObject>(
        model: _entities[7],
        toOneRelations: (ProducteurObject object) => [],
        toManyRelations: (ProducteurObject object) => {},
        getId: (ProducteurObject object) => object.id,
        setId: (ProducteurObject object, int id) {
          object.id = id;
        },
        objectToFB: (ProducteurObject object, fb.Builder fbb) {
          final prenomOffset =
              object.prenom == null ? null : fbb.writeString(object.prenom!);
          final nomOffset =
              object.nom == null ? null : fbb.writeString(object.nom!);
          final cniOffset =
              object.cni == null ? null : fbb.writeString(object.cni!);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final op_nameOffset =
              object.op_name == null ? null : fbb.writeString(object.op_name!);
          final type_op_nameOffset = object.type_op_name == null
              ? null
              : fbb.writeString(object.type_op_name!);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, prenomOffset);
          fbb.addOffset(2, nomOffset);
          fbb.addOffset(3, cniOffset);
          fbb.addOffset(4, emailOffset);
          fbb.addInt64(5, object.op_id);
          fbb.addOffset(6, op_nameOffset);
          fbb.addInt64(7, object.type_op_id);
          fbb.addOffset(8, type_op_nameOffset);
          fbb.addBool(9, object.is_actif);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ProducteurObject(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              prenom: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              nom: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              cni: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              op_id: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 14),
              op_name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              type_op_id: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 18),
              type_op_name:
                  const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 20),
              is_actif: const fb.BoolReader().vTableGet(buffer, rootOffset, 22, false));

          return object;
        }),
    SaisonObject: EntityDefinition<SaisonObject>(
        model: _entities[8],
        toOneRelations: (SaisonObject object) => [],
        toManyRelations: (SaisonObject object) => {},
        getId: (SaisonObject object) => object.id,
        setId: (SaisonObject object, int id) {
          object.id = id;
        },
        objectToFB: (SaisonObject object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SaisonObject(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''));

          return object;
        }),
    TypeChargeExploitationObject:
        EntityDefinition<TypeChargeExploitationObject>(
            model: _entities[9],
            toOneRelations: (TypeChargeExploitationObject object) => [],
            toManyRelations: (TypeChargeExploitationObject object) => {},
            getId: (TypeChargeExploitationObject object) => object.id,
            setId: (TypeChargeExploitationObject object, int id) {
              object.id = id;
            },
            objectToFB: (TypeChargeExploitationObject object, fb.Builder fbb) {
              final nameOffset = fbb.writeString(object.name);
              fbb.startTable(3);
              fbb.addInt64(0, object.id);
              fbb.addOffset(1, nameOffset);
              fbb.finish(fbb.endTable());
              return object.id;
            },
            objectFromFB: (Store store, ByteData fbData) {
              final buffer = fb.BufferContext(fbData);
              final rootOffset = buffer.derefObject(0);

              final object = TypeChargeExploitationObject(
                  id: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 4, 0),
                  name: const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 6, ''));

              return object;
            }),
    TypeChargeObject: EntityDefinition<TypeChargeObject>(
        model: _entities[10],
        toOneRelations: (TypeChargeObject object) => [],
        toManyRelations: (TypeChargeObject object) => {},
        getId: (TypeChargeObject object) => object.id,
        setId: (TypeChargeObject object, int id) {
          object.id = id;
        },
        objectToFB: (TypeChargeObject object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TypeChargeObject(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''));

          return object;
        }),
    TypeOpObject: EntityDefinition<TypeOpObject>(
        model: _entities[11],
        toOneRelations: (TypeOpObject object) => [],
        toManyRelations: (TypeOpObject object) => {},
        getId: (TypeOpObject object) => object.id,
        setId: (TypeOpObject object, int id) {
          object.id = id;
        },
        objectToFB: (TypeOpObject object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TypeOpObject(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''));

          return object;
        }),
    UserObject: EntityDefinition<UserObject>(
        model: _entities[12],
        toOneRelations: (UserObject object) => [],
        toManyRelations: (UserObject object) => {},
        getId: (UserObject object) => object.id,
        setId: (UserObject object, int id) {
          object.id = id;
        },
        objectToFB: (UserObject object, fb.Builder fbb) {
          final tokenOffset = fbb.writeString(object.token);
          final emailOffset = fbb.writeString(object.email);
          final passwordOffset = fbb.writeString(object.password);
          final firstnameOffset = fbb.writeString(object.firstname);
          final lastnameOffset = fbb.writeString(object.lastname);
          final profil_nameOffset = object.profil_name == null
              ? null
              : fbb.writeString(object.profil_name!);
          final producteur_prenomOffset = object.producteur_prenom == null
              ? null
              : fbb.writeString(object.producteur_prenom!);
          final producteur_nomOffset = object.producteur_nom == null
              ? null
              : fbb.writeString(object.producteur_nom!);
          final producteur_cniOffset = object.producteur_cni == null
              ? null
              : fbb.writeString(object.producteur_cni!);
          final op_nameOffset =
              object.op_name == null ? null : fbb.writeString(object.op_name!);
          final sous_zone_nameOffset = object.sous_zone_name == null
              ? null
              : fbb.writeString(object.sous_zone_name!);
          final zone_nameOffset = object.zone_name == null
              ? null
              : fbb.writeString(object.zone_name!);
          fbb.startTable(19);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, tokenOffset);
          fbb.addOffset(2, emailOffset);
          fbb.addOffset(3, passwordOffset);
          fbb.addOffset(4, firstnameOffset);
          fbb.addOffset(5, lastnameOffset);
          fbb.addInt64(6, object.profil_id);
          fbb.addOffset(7, profil_nameOffset);
          fbb.addInt64(8, object.producteur_id);
          fbb.addOffset(9, producteur_prenomOffset);
          fbb.addOffset(10, producteur_nomOffset);
          fbb.addOffset(11, producteur_cniOffset);
          fbb.addInt64(12, object.op_id);
          fbb.addOffset(13, op_nameOffset);
          fbb.addInt64(14, object.sous_zone_id);
          fbb.addOffset(15, sous_zone_nameOffset);
          fbb.addInt64(16, object.zone_id);
          fbb.addOffset(17, zone_nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = UserObject(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              token: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              password: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              firstname: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              lastname: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              profil_id: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 16),
              producteur_id: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 20),
              producteur_prenom: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22),
              producteur_nom: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 24),
              producteur_cni: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 26),
              profil_name: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 18),
              op_id: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 28),
              op_name: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 30),
              sous_zone_id: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 32),
              sous_zone_name: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 34),
              zone_id: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 36),
              zone_name: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 38));

          return object;
        }),
    VarieteObject: EntityDefinition<VarieteObject>(
        model: _entities[13],
        toOneRelations: (VarieteObject object) => [],
        toManyRelations: (VarieteObject object) => {},
        getId: (VarieteObject object) => object.id,
        setId: (VarieteObject object, int id) {
          object.id = id;
        },
        objectToFB: (VarieteObject object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final surface_uniteOffset = object.surface_unite == null
              ? null
              : fbb.writeString(object.surface_unite!);
          final quantite_uniteOffset = object.quantite_unite == null
              ? null
              : fbb.writeString(object.quantite_unite!);
          final produit_nameOffset = fbb.writeString(object.produit_name);
          final filiere_nameOffset = fbb.writeString(object.filiere_name);
          final familleemplacement_nameOffset =
              fbb.writeString(object.familleemplacement_name);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, surface_uniteOffset);
          fbb.addOffset(3, quantite_uniteOffset);
          fbb.addFloat64(4, object.rendement_unite);
          fbb.addInt64(5, object.produit_id);
          fbb.addOffset(6, produit_nameOffset);
          fbb.addInt64(7, object.filiere_id);
          fbb.addOffset(8, filiere_nameOffset);
          fbb.addInt64(9, object.familleemplacement_id);
          fbb.addOffset(10, familleemplacement_nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = VarieteObject(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              surface_unite: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              quantite_unite: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              rendement_unite: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 12),
              produit_id:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0),
              produit_name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              filiere_id:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0),
              filiere_name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, ''),
              familleemplacement_id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0),
              familleemplacement_name: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 24, ''));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [AnneeObject] entity fields to define ObjectBox queries.
class AnneeObject_ {
  /// see [AnneeObject.id]
  static final id =
      QueryIntegerProperty<AnneeObject>(_entities[0].properties[0]);

  /// see [AnneeObject.valeur]
  static final valeur =
      QueryIntegerProperty<AnneeObject>(_entities[0].properties[1]);

  /// see [AnneeObject.name]
  static final name =
      QueryStringProperty<AnneeObject>(_entities[0].properties[2]);
}

/// [ChargeExploitationObject] entity fields to define ObjectBox queries.
class ChargeExploitationObject_ {
  /// see [ChargeExploitationObject.id]
  static final id = QueryIntegerProperty<ChargeExploitationObject>(
      _entities[1].properties[0]);

  /// see [ChargeExploitationObject.name]
  static final name =
      QueryStringProperty<ChargeExploitationObject>(_entities[1].properties[1]);

  /// see [ChargeExploitationObject.unite]
  static final unite =
      QueryStringProperty<ChargeExploitationObject>(_entities[1].properties[2]);

  /// see [ChargeExploitationObject.pu]
  static final pu =
      QueryDoubleProperty<ChargeExploitationObject>(_entities[1].properties[3]);

  /// see [ChargeExploitationObject.quantite_unite_superficie]
  static final quantite_unite_superficie =
      QueryDoubleProperty<ChargeExploitationObject>(_entities[1].properties[4]);

  /// see [ChargeExploitationObject.produit_id]
  static final produit_id = QueryIntegerProperty<ChargeExploitationObject>(
      _entities[1].properties[5]);

  /// see [ChargeExploitationObject.produit_name]
  static final produit_name =
      QueryStringProperty<ChargeExploitationObject>(_entities[1].properties[6]);

  /// see [ChargeExploitationObject.famille_charge_exploitation_id]
  static final famille_charge_exploitation_id =
      QueryIntegerProperty<ChargeExploitationObject>(
          _entities[1].properties[7]);

  /// see [ChargeExploitationObject.famille_charge_exploitation_name]
  static final famille_charge_exploitation_name =
      QueryStringProperty<ChargeExploitationObject>(_entities[1].properties[8]);

  /// see [ChargeExploitationObject.type_charge_exploitation_id]
  static final type_charge_exploitation_id =
      QueryIntegerProperty<ChargeExploitationObject>(
          _entities[1].properties[9]);

  /// see [ChargeExploitationObject.type_charge_exploitation_name]
  static final type_charge_exploitation_name =
      QueryStringProperty<ChargeExploitationObject>(
          _entities[1].properties[10]);

  /// see [ChargeExploitationObject.isAchat]
  static final isAchat = QueryBooleanProperty<ChargeExploitationObject>(
      _entities[1].properties[11]);
}

/// [ExploitationChargeExploitationObject] entity fields to define ObjectBox queries.
class ExploitationChargeExploitationObject_ {
  /// see [ExploitationChargeExploitationObject.id]
  static final id = QueryIntegerProperty<ExploitationChargeExploitationObject>(
      _entities[2].properties[0]);

  /// see [ExploitationChargeExploitationObject.date]
  static final date =
      QueryIntegerProperty<ExploitationChargeExploitationObject>(
          _entities[2].properties[1]);

  /// see [ExploitationChargeExploitationObject.unite]
  static final unite =
      QueryStringProperty<ExploitationChargeExploitationObject>(
          _entities[2].properties[2]);

  /// see [ExploitationChargeExploitationObject.pu]
  static final pu = QueryDoubleProperty<ExploitationChargeExploitationObject>(
      _entities[2].properties[3]);

  /// see [ExploitationChargeExploitationObject.quantite]
  static final quantite =
      QueryDoubleProperty<ExploitationChargeExploitationObject>(
          _entities[2].properties[4]);

  /// see [ExploitationChargeExploitationObject.valeur]
  static final valeur =
      QueryDoubleProperty<ExploitationChargeExploitationObject>(
          _entities[2].properties[5]);

  /// see [ExploitationChargeExploitationObject.observation]
  static final observation =
      QueryStringProperty<ExploitationChargeExploitationObject>(
          _entities[2].properties[6]);

  /// see [ExploitationChargeExploitationObject.charge_exploitation_id]
  static final charge_exploitation_id =
      QueryIntegerProperty<ExploitationChargeExploitationObject>(
          _entities[2].properties[7]);

  /// see [ExploitationChargeExploitationObject.charge_exploitation_name]
  static final charge_exploitation_name =
      QueryStringProperty<ExploitationChargeExploitationObject>(
          _entities[2].properties[8]);

  /// see [ExploitationChargeExploitationObject.type_charge_exploitation_id]
  static final type_charge_exploitation_id =
      QueryIntegerProperty<ExploitationChargeExploitationObject>(
          _entities[2].properties[9]);

  /// see [ExploitationChargeExploitationObject.type_charge_exploitation_name]
  static final type_charge_exploitation_name =
      QueryStringProperty<ExploitationChargeExploitationObject>(
          _entities[2].properties[10]);

  /// see [ExploitationChargeExploitationObject.famille_exploitation_id]
  static final famille_exploitation_id =
      QueryIntegerProperty<ExploitationChargeExploitationObject>(
          _entities[2].properties[11]);

  /// see [ExploitationChargeExploitationObject.famille_charge_exploitation_name]
  static final famille_charge_exploitation_name =
      QueryStringProperty<ExploitationChargeExploitationObject>(
          _entities[2].properties[12]);

  /// see [ExploitationChargeExploitationObject.exploitation_id]
  static final exploitation_id =
      QueryIntegerProperty<ExploitationChargeExploitationObject>(
          _entities[2].properties[13]);
}

/// [ExploitationObject] entity fields to define ObjectBox queries.
class ExploitationObject_ {
  /// see [ExploitationObject.id]
  static final id =
      QueryIntegerProperty<ExploitationObject>(_entities[3].properties[0]);

  /// see [ExploitationObject.producteur_id]
  static final producteur_id =
      QueryIntegerProperty<ExploitationObject>(_entities[3].properties[1]);

  /// see [ExploitationObject.prenom]
  static final prenom =
      QueryStringProperty<ExploitationObject>(_entities[3].properties[2]);

  /// see [ExploitationObject.nom]
  static final nom =
      QueryStringProperty<ExploitationObject>(_entities[3].properties[3]);

  /// see [ExploitationObject.cni]
  static final cni =
      QueryStringProperty<ExploitationObject>(_entities[3].properties[4]);

  /// see [ExploitationObject.email]
  static final email =
      QueryStringProperty<ExploitationObject>(_entities[3].properties[5]);

  /// see [ExploitationObject.is_actif]
  static final is_actif =
      QueryBooleanProperty<ExploitationObject>(_entities[3].properties[6]);

  /// see [ExploitationObject.op_id]
  static final op_id =
      QueryIntegerProperty<ExploitationObject>(_entities[3].properties[7]);

  /// see [ExploitationObject.op_name]
  static final op_name =
      QueryStringProperty<ExploitationObject>(_entities[3].properties[8]);

  /// see [ExploitationObject.type_op_id]
  static final type_op_id =
      QueryIntegerProperty<ExploitationObject>(_entities[3].properties[9]);

  /// see [ExploitationObject.type_op_name]
  static final type_op_name =
      QueryStringProperty<ExploitationObject>(_entities[3].properties[10]);

  /// see [ExploitationObject.exploitation_id]
  static final exploitation_id =
      QueryIntegerProperty<ExploitationObject>(_entities[3].properties[11]);

  /// see [ExploitationObject.compte]
  static final compte =
      QueryStringProperty<ExploitationObject>(_entities[3].properties[12]);

  /// see [ExploitationObject.unite]
  static final unite =
      QueryStringProperty<ExploitationObject>(_entities[3].properties[13]);

  /// see [ExploitationObject.production_prevision]
  static final production_prevision =
      QueryDoubleProperty<ExploitationObject>(_entities[3].properties[14]);

  /// see [ExploitationObject.superficie_prevision]
  static final superficie_prevision =
      QueryDoubleProperty<ExploitationObject>(_entities[3].properties[15]);

  /// see [ExploitationObject.pu_prevision]
  static final pu_prevision =
      QueryDoubleProperty<ExploitationObject>(_entities[3].properties[16]);

  /// see [ExploitationObject.variete_prevision_id]
  static final variete_prevision_id =
      QueryIntegerProperty<ExploitationObject>(_entities[3].properties[17]);

  /// see [ExploitationObject.variete_prevision_name]
  static final variete_prevision_name =
      QueryStringProperty<ExploitationObject>(_entities[3].properties[18]);

  /// see [ExploitationObject.produit_prevision_id]
  static final produit_prevision_id =
      QueryIntegerProperty<ExploitationObject>(_entities[3].properties[19]);

  /// see [ExploitationObject.produit_prevision_name]
  static final produit_prevision_name =
      QueryStringProperty<ExploitationObject>(_entities[3].properties[20]);

  /// see [ExploitationObject.filiere_prevision_id]
  static final filiere_prevision_id =
      QueryIntegerProperty<ExploitationObject>(_entities[3].properties[21]);

  /// see [ExploitationObject.filiere_prevision_name]
  static final filiere_prevision_name =
      QueryStringProperty<ExploitationObject>(_entities[3].properties[22]);

  /// see [ExploitationObject.production]
  static final production =
      QueryDoubleProperty<ExploitationObject>(_entities[3].properties[23]);

  /// see [ExploitationObject.superficie]
  static final superficie =
      QueryDoubleProperty<ExploitationObject>(_entities[3].properties[24]);

  /// see [ExploitationObject.pu]
  static final pu =
      QueryDoubleProperty<ExploitationObject>(_entities[3].properties[25]);

  /// see [ExploitationObject.variete_id]
  static final variete_id =
      QueryIntegerProperty<ExploitationObject>(_entities[3].properties[26]);

  /// see [ExploitationObject.variete_name]
  static final variete_name =
      QueryStringProperty<ExploitationObject>(_entities[3].properties[27]);

  /// see [ExploitationObject.produit_id]
  static final produit_id =
      QueryIntegerProperty<ExploitationObject>(_entities[3].properties[28]);

  /// see [ExploitationObject.produit_name]
  static final produit_name =
      QueryStringProperty<ExploitationObject>(_entities[3].properties[29]);

  /// see [ExploitationObject.filiere_id]
  static final filiere_id =
      QueryIntegerProperty<ExploitationObject>(_entities[3].properties[30]);

  /// see [ExploitationObject.filiere_name]
  static final filiere_name =
      QueryStringProperty<ExploitationObject>(_entities[3].properties[31]);

  /// see [ExploitationObject.annne_id]
  static final annne_id =
      QueryIntegerProperty<ExploitationObject>(_entities[3].properties[32]);

  /// see [ExploitationObject.annee_name]
  static final annee_name =
      QueryStringProperty<ExploitationObject>(_entities[3].properties[33]);

  /// see [ExploitationObject.saison_id]
  static final saison_id =
      QueryIntegerProperty<ExploitationObject>(_entities[3].properties[34]);

  /// see [ExploitationObject.saison_name]
  static final saison_name =
      QueryStringProperty<ExploitationObject>(_entities[3].properties[35]);
}

/// [FamilleChargeExploitationObject] entity fields to define ObjectBox queries.
class FamilleChargeExploitationObject_ {
  /// see [FamilleChargeExploitationObject.id]
  static final id = QueryIntegerProperty<FamilleChargeExploitationObject>(
      _entities[4].properties[0]);

  /// see [FamilleChargeExploitationObject.name]
  static final name = QueryStringProperty<FamilleChargeExploitationObject>(
      _entities[4].properties[1]);
}

/// [OpObject] entity fields to define ObjectBox queries.
class OpObject_ {
  /// see [OpObject.id]
  static final id = QueryIntegerProperty<OpObject>(_entities[5].properties[0]);

  /// see [OpObject.name]
  static final name = QueryStringProperty<OpObject>(_entities[5].properties[1]);

  /// see [OpObject.email]
  static final email =
      QueryStringProperty<OpObject>(_entities[5].properties[2]);

  /// see [OpObject.telephone]
  static final telephone =
      QueryStringProperty<OpObject>(_entities[5].properties[3]);

  /// see [OpObject.adresse]
  static final adresse =
      QueryStringProperty<OpObject>(_entities[5].properties[4]);

  /// see [OpObject.is_actif]
  static final is_actif =
      QueryBooleanProperty<OpObject>(_entities[5].properties[5]);

  /// see [OpObject.type_op_id]
  static final type_op_id =
      QueryIntegerProperty<OpObject>(_entities[5].properties[6]);

  /// see [OpObject.type_op_name]
  static final type_op_name =
      QueryStringProperty<OpObject>(_entities[5].properties[7]);

  /// see [OpObject.localite_id]
  static final localite_id =
      QueryIntegerProperty<OpObject>(_entities[5].properties[8]);

  /// see [OpObject.localite_name]
  static final localite_name =
      QueryStringProperty<OpObject>(_entities[5].properties[9]);

  /// see [OpObject.sous_zone_id]
  static final sous_zone_id =
      QueryIntegerProperty<OpObject>(_entities[5].properties[10]);

  /// see [OpObject.sous_zone_name]
  static final sous_zone_name =
      QueryStringProperty<OpObject>(_entities[5].properties[11]);

  /// see [OpObject.zone_id]
  static final zone_id =
      QueryIntegerProperty<OpObject>(_entities[5].properties[12]);

  /// see [OpObject.zone_name]
  static final zone_name =
      QueryStringProperty<OpObject>(_entities[5].properties[13]);

  /// see [OpObject.departement_id]
  static final departement_id =
      QueryIntegerProperty<OpObject>(_entities[5].properties[14]);

  /// see [OpObject.departement_name]
  static final departement_name =
      QueryStringProperty<OpObject>(_entities[5].properties[15]);

  /// see [OpObject.region_id]
  static final region_id =
      QueryIntegerProperty<OpObject>(_entities[5].properties[16]);

  /// see [OpObject.region_name]
  static final region_name =
      QueryStringProperty<OpObject>(_entities[5].properties[17]);

  /// see [OpObject.pays_id]
  static final pays_id =
      QueryIntegerProperty<OpObject>(_entities[5].properties[18]);

  /// see [OpObject.pays_name]
  static final pays_name =
      QueryStringProperty<OpObject>(_entities[5].properties[19]);
}

/// [PersonneObject] entity fields to define ObjectBox queries.
class PersonneObject_ {
  /// see [PersonneObject.id]
  static final id =
      QueryIntegerProperty<PersonneObject>(_entities[6].properties[0]);

  /// see [PersonneObject.age]
  static final age =
      QueryIntegerProperty<PersonneObject>(_entities[6].properties[1]);

  /// see [PersonneObject.poids]
  static final poids =
      QueryIntegerProperty<PersonneObject>(_entities[6].properties[2]);

  /// see [PersonneObject.name]
  static final name =
      QueryStringProperty<PersonneObject>(_entities[6].properties[3]);
}

/// [ProducteurObject] entity fields to define ObjectBox queries.
class ProducteurObject_ {
  /// see [ProducteurObject.id]
  static final id =
      QueryIntegerProperty<ProducteurObject>(_entities[7].properties[0]);

  /// see [ProducteurObject.prenom]
  static final prenom =
      QueryStringProperty<ProducteurObject>(_entities[7].properties[1]);

  /// see [ProducteurObject.nom]
  static final nom =
      QueryStringProperty<ProducteurObject>(_entities[7].properties[2]);

  /// see [ProducteurObject.cni]
  static final cni =
      QueryStringProperty<ProducteurObject>(_entities[7].properties[3]);

  /// see [ProducteurObject.email]
  static final email =
      QueryStringProperty<ProducteurObject>(_entities[7].properties[4]);

  /// see [ProducteurObject.op_id]
  static final op_id =
      QueryIntegerProperty<ProducteurObject>(_entities[7].properties[5]);

  /// see [ProducteurObject.op_name]
  static final op_name =
      QueryStringProperty<ProducteurObject>(_entities[7].properties[6]);

  /// see [ProducteurObject.type_op_id]
  static final type_op_id =
      QueryIntegerProperty<ProducteurObject>(_entities[7].properties[7]);

  /// see [ProducteurObject.type_op_name]
  static final type_op_name =
      QueryStringProperty<ProducteurObject>(_entities[7].properties[8]);

  /// see [ProducteurObject.is_actif]
  static final is_actif =
      QueryBooleanProperty<ProducteurObject>(_entities[7].properties[9]);
}

/// [SaisonObject] entity fields to define ObjectBox queries.
class SaisonObject_ {
  /// see [SaisonObject.id]
  static final id =
      QueryIntegerProperty<SaisonObject>(_entities[8].properties[0]);

  /// see [SaisonObject.name]
  static final name =
      QueryStringProperty<SaisonObject>(_entities[8].properties[1]);

  /// see [SaisonObject.description]
  static final description =
      QueryStringProperty<SaisonObject>(_entities[8].properties[2]);
}

/// [TypeChargeExploitationObject] entity fields to define ObjectBox queries.
class TypeChargeExploitationObject_ {
  /// see [TypeChargeExploitationObject.id]
  static final id = QueryIntegerProperty<TypeChargeExploitationObject>(
      _entities[9].properties[0]);

  /// see [TypeChargeExploitationObject.name]
  static final name = QueryStringProperty<TypeChargeExploitationObject>(
      _entities[9].properties[1]);
}

/// [TypeChargeObject] entity fields to define ObjectBox queries.
class TypeChargeObject_ {
  /// see [TypeChargeObject.id]
  static final id =
      QueryIntegerProperty<TypeChargeObject>(_entities[10].properties[0]);

  /// see [TypeChargeObject.name]
  static final name =
      QueryStringProperty<TypeChargeObject>(_entities[10].properties[1]);
}

/// [TypeOpObject] entity fields to define ObjectBox queries.
class TypeOpObject_ {
  /// see [TypeOpObject.id]
  static final id =
      QueryIntegerProperty<TypeOpObject>(_entities[11].properties[0]);

  /// see [TypeOpObject.name]
  static final name =
      QueryStringProperty<TypeOpObject>(_entities[11].properties[1]);
}

/// [UserObject] entity fields to define ObjectBox queries.
class UserObject_ {
  /// see [UserObject.id]
  static final id =
      QueryIntegerProperty<UserObject>(_entities[12].properties[0]);

  /// see [UserObject.token]
  static final token =
      QueryStringProperty<UserObject>(_entities[12].properties[1]);

  /// see [UserObject.email]
  static final email =
      QueryStringProperty<UserObject>(_entities[12].properties[2]);

  /// see [UserObject.password]
  static final password =
      QueryStringProperty<UserObject>(_entities[12].properties[3]);

  /// see [UserObject.firstname]
  static final firstname =
      QueryStringProperty<UserObject>(_entities[12].properties[4]);

  /// see [UserObject.lastname]
  static final lastname =
      QueryStringProperty<UserObject>(_entities[12].properties[5]);

  /// see [UserObject.profil_id]
  static final profil_id =
      QueryIntegerProperty<UserObject>(_entities[12].properties[6]);

  /// see [UserObject.profil_name]
  static final profil_name =
      QueryStringProperty<UserObject>(_entities[12].properties[7]);

  /// see [UserObject.producteur_id]
  static final producteur_id =
      QueryIntegerProperty<UserObject>(_entities[12].properties[8]);

  /// see [UserObject.producteur_prenom]
  static final producteur_prenom =
      QueryStringProperty<UserObject>(_entities[12].properties[9]);

  /// see [UserObject.producteur_nom]
  static final producteur_nom =
      QueryStringProperty<UserObject>(_entities[12].properties[10]);

  /// see [UserObject.producteur_cni]
  static final producteur_cni =
      QueryStringProperty<UserObject>(_entities[12].properties[11]);

  /// see [UserObject.op_id]
  static final op_id =
      QueryIntegerProperty<UserObject>(_entities[12].properties[12]);

  /// see [UserObject.op_name]
  static final op_name =
      QueryStringProperty<UserObject>(_entities[12].properties[13]);

  /// see [UserObject.sous_zone_id]
  static final sous_zone_id =
      QueryIntegerProperty<UserObject>(_entities[12].properties[14]);

  /// see [UserObject.sous_zone_name]
  static final sous_zone_name =
      QueryStringProperty<UserObject>(_entities[12].properties[15]);

  /// see [UserObject.zone_id]
  static final zone_id =
      QueryIntegerProperty<UserObject>(_entities[12].properties[16]);

  /// see [UserObject.zone_name]
  static final zone_name =
      QueryStringProperty<UserObject>(_entities[12].properties[17]);
}

/// [VarieteObject] entity fields to define ObjectBox queries.
class VarieteObject_ {
  /// see [VarieteObject.id]
  static final id =
      QueryIntegerProperty<VarieteObject>(_entities[13].properties[0]);

  /// see [VarieteObject.name]
  static final name =
      QueryStringProperty<VarieteObject>(_entities[13].properties[1]);

  /// see [VarieteObject.surface_unite]
  static final surface_unite =
      QueryStringProperty<VarieteObject>(_entities[13].properties[2]);

  /// see [VarieteObject.quantite_unite]
  static final quantite_unite =
      QueryStringProperty<VarieteObject>(_entities[13].properties[3]);

  /// see [VarieteObject.rendement_unite]
  static final rendement_unite =
      QueryDoubleProperty<VarieteObject>(_entities[13].properties[4]);

  /// see [VarieteObject.produit_id]
  static final produit_id =
      QueryIntegerProperty<VarieteObject>(_entities[13].properties[5]);

  /// see [VarieteObject.produit_name]
  static final produit_name =
      QueryStringProperty<VarieteObject>(_entities[13].properties[6]);

  /// see [VarieteObject.filiere_id]
  static final filiere_id =
      QueryIntegerProperty<VarieteObject>(_entities[13].properties[7]);

  /// see [VarieteObject.filiere_name]
  static final filiere_name =
      QueryStringProperty<VarieteObject>(_entities[13].properties[8]);

  /// see [VarieteObject.familleemplacement_id]
  static final familleemplacement_id =
      QueryIntegerProperty<VarieteObject>(_entities[13].properties[9]);

  /// see [VarieteObject.familleemplacement_name]
  static final familleemplacement_name =
      QueryStringProperty<VarieteObject>(_entities[13].properties[10]);
}
