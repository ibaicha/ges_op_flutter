import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';

import '../../../../../datas/repositories/repositories.dart';
import '../../../../../models/models.dart';
import 'ece_id_exploitation_event.dart';
import 'ece_id_exploitation_state.dart';

class EceIdExploitationBloc
    extends Bloc<EceIdExploitationEvent, EceIdExploitationState> {
  final ExploitationChargeExploitationRepository eceIdExploitationRepository;

  EceIdExploitationBloc(
    this.eceIdExploitationRepository,
  ) : super(EceIdExploitationInitialState()) {
    on<LoadEceIdExploitationEvent>(_EceIdExploitationEvent);
  }

  void _EceIdExploitationEvent(
    LoadEceIdExploitationEvent event,
    Emitter<EceIdExploitationState> emitter,
  ) async {
    if (event is LoadEceIdExploitationEvent) {
      emitter(EceIdExploitationLoadingState());
      // await Future.delayed(const Duration(milliseconds: 500));
      List<ExploitationChargeExploitationObject>? apiResult =
          await eceIdExploitationRepository
              .getECEidExploitation(event.idExploitation);
      if (apiResult == null) {
        emitter(EceIdExploitationErrorState());
      } else {
        emitter(EceIdExploitationLoadedState(
            apiResult: apiResult, idExploitation: event.idExploitation));
      }
    }
  }
}
