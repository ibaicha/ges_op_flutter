import 'dart:ffi';
import 'dart:ffi' as ffi;
import 'package:ffi/ffi.dart';

import 'package:styled_text/styled_text.dart';

import 'package:accordion/accordion.dart';
import 'package:accordion/controllers.dart';
import 'package:dropdown_pro/dropdown.dart';
import 'package:dropdown_pro/dropdown_item.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

import 'package:get/get.dart';
import 'package:getwidget/components/button/gf_button.dart';
import 'package:getwidget/getwidget.dart';
import 'package:getwidget/shape/gf_button_shape.dart';

import '../../../features/features.dart';
import '../../../models/models.dart';

class EditExploitationPage extends StatefulWidget {
  static const String routeName = '/editExploitation';

  const EditExploitationPage({Key? key}) : super(key: key);

  State<EditExploitationPage> createState() => _EditExploitationPageState();
}

class _EditExploitationPageState extends State<EditExploitationPage>
    with SingleTickerProviderStateMixin {
  late TabController _tabController;
  int _tabIndex = 0;
  TextEditingController productionController = TextEditingController();
  TextEditingController puController = TextEditingController();
  TextEditingController surfaceController = StyleableTextFieldController(
    styles: TextPartStyleDefinitions(
      definitionList: <TextPartStyleDefinition>[
        TextPartStyleDefinition(
          style: const TextStyle(
            color: Colors.black38,
          ),
          pattern: r',(\d+)$',
        )
      ],
    ),
  );

  Map<int, TextEditingController> mapPuControlleur = {};
  Map<int, TextEditingController> mapQuantiteControlleur = {};
  Map<int, double> mapValeurCharge = {};
  Map<int, double> mapValeurTypeCharge = {};
  Map<int, String> mapIconAddUpdate = {};
  Map<int, String> mapUnite = {};

  Map<int, int> mapChargeExploitationId = {};
  Map<int, String> mapChargeExploitationName = {};
  Map<int, int> mapTypeChargeExploitationId = {};
  Map<int, String> mapTypeChargeExploitationName = {};
  Map<int, int> mapChargeFamilleExploitationId = {};
  Map<int, String> mapChargeFamilleExploitationName = {};
  Map<int, int> mapExploitationChargeExploitationId = {};

  late String title = 'Nouveau Exploitation';
  late String labelButton = 'Ajouter';

  late String _compte = '';
  late String unitesurface = '';
  late String quantiteproduit = '';
  late double rendement_theorique = 0;
  late double rendement_reel = 0;

  List<DropdownItem> _itemAnneesList = [];
  String _singleSelectedAnneeId = "";
  List<DropdownItem> _itemSaisonsList = [];
  String _singleSelectedSaisonId = "";
  List<DropdownItem> _itemVarietesList = [];
  String _singleSelectedVarieteId = "";
  String _singleSelectedProduitId = "";
  String _singleSelectedFiliereId = "";

  List<ChargeExploitationObject> listChargeExploitationObject = [];
  List<TypeChargeExploitationObject> listTypeChargeExploitationObject = [];

  var args = Get.arguments;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 2, vsync: this, initialIndex: 0);
    _tabController.addListener(_handleTabSelection);
    _generateAnneesItems();
    _generateSaisonsItems();
    _generateVarietesItems();
    _getCompteExploitation(args["AddOrUpdate"]);
    _generateTypeChargeExploitationItems();
  }

  void _handleTabSelection() {
    setState(() {
      _tabController.index = _tabIndex;
    });
  }

  _getCompteExploitation(String AddOrUpdate) {
    if (AddOrUpdate == 'UPDATE') {
      _compte = ApiConstants.exploitationObject.compte.toString();
      _singleSelectedAnneeId =
          ApiConstants.exploitationObject.annne_id.toString();
      // print(' ANNEE: ' + _singleSelectedAnneeId);
      _singleSelectedSaisonId =
          ApiConstants.exploitationObject.saison_id.toString();
      // print(' SAISON: ' + _singleSelectedSaisonId);
      _singleSelectedVarieteId =
          ApiConstants.exploitationObject.variete_id.toString();
      // print(' VARIETE: ' + _singleSelectedVarieteId);

      final varieteBox = ObjectBox.varietesBox;
      VarieteObject? varieteObject =
          varieteBox!.get(int.parse(_singleSelectedVarieteId));
      _singleSelectedProduitId = varieteObject!.produit_id.toString();
      //_singleSelectedProduitId = ApiConstants.exploitationObject.produit_id.toString();
      //_singleSelectedFiliereId = ApiConstants.exploitationObject.filiere_prevision_id.toString();

      productionController.text =
          ApiConstants.exploitationObject.production.toString();
      surfaceController.text =
          ApiConstants.exploitationObject.superficie.toString();
      puController.text = ApiConstants.exploitationObject.pu.toString();
    }
    if (AddOrUpdate == 'ADD') {
      _compte = '';
      /*
    final varieteBox  = ObjectBox.varietesBox;
    VarieteObject? varieteObject = varieteBox!.get(int.parse(_singleSelectedVarieteId));
    _singleSelectedProduitId = varieteObject!.produit_id.toString();

    _singleSelectedAnneeId = ApiConstants.exploitationObject.annne_id.toString();
    _singleSelectedSaisonId = ApiConstants.exploitationObject.saison_id.toString();
    _singleSelectedVarieteId = ApiConstants.exploitationObject.variete_id.toString();
    productionController.text = ApiConstants.exploitationObject.production.toString();
    surfaceController.text = ApiConstants.exploitationObject.superficie.toString();
    puController.text = ApiConstants.exploitationObject.pu.toString();

     */

    }
  }

  _generateChargeExploitationItems(
      int idTypeChargeExploitation, String AddOrUpdate) {
    final chargeExploitationsBox = ObjectBox.chargeExploitationsBox;

    final query = chargeExploitationsBox!
        .query(ChargeExploitationObject_.type_charge_exploitation_id
            .equals(idTypeChargeExploitation)
            .and(ChargeExploitationObject_.produit_id
                .equals(int.parse(_singleSelectedProduitId.toString()))))
        .build();
    final mesChargeExploitationsBox = query.find();

    List<ChargeExploitationObject> listmesChargeExploitationObject = [];

    for (var element in mesChargeExploitationsBox) {
      TextEditingController _controllerPu = TextEditingController();
      TextEditingController _controllerQuantite = TextEditingController();

      mapUnite[element.id] = element.unite.toString();
      mapChargeFamilleExploitationId[element.id] =
          element.famille_charge_exploitation_id;
      mapChargeFamilleExploitationName[element.id] =
          element.famille_charge_exploitation_name.toString();
      mapTypeChargeExploitationId[element.id] =
          element.type_charge_exploitation_id;
      mapTypeChargeExploitationName[element.id] =
          element.type_charge_exploitation_name.toString();
      mapChargeExploitationId[element.id] = element.id;
      mapChargeExploitationName[element.id] = element.name;

      final exploitationChargeExploitationBox =
          ObjectBox.exploitationChargeExploitationBox;
      final quer = exploitationChargeExploitationBox!
          .query(ExploitationChargeExploitationObject_.exploitation_id
              .equals(ApiConstants.exploitationObject.id)
              .and(ExploitationChargeExploitationObject_.charge_exploitation_id
                  .equals(element.id)))
          .build();
      final mesExploitationChargeExploitationBox = quer.find();
      // print('mesExploitationChargeExploitationBox.length : ${mesExploitationChargeExploitationBox.length}');
      _controllerQuantite.text = '';
      _controllerPu.text = element.pu.toString();
      mapIconAddUpdate[element.id] = 'Add';

      if (AddOrUpdate == 'UPDATE') {
        // print('AddOrUpdate : UPDATE');
        if (mesExploitationChargeExploitationBox.length > 0) {
          mapExploitationChargeExploitationId[element.id] =
              mesExploitationChargeExploitationBox.first.id;
          _controllerQuantite.text =
              mesExploitationChargeExploitationBox.first.quantite.toString();
          _controllerPu.text =
              mesExploitationChargeExploitationBox.first.pu.toString();
          mapIconAddUpdate[element.id] = 'Update';
        }
      }
      mapPuControlleur[element.id] = _controllerPu;
      mapQuantiteControlleur[element.id] = _controllerQuantite;
      // _montantCharge(element.id);
      mapValeurCharge[element.id] = _montantCharge(element.id);
      listmesChargeExploitationObject.add(ChargeExploitationObject(
          id: element.id,
          name: element.name,
          unite: element.unite,
          pu: double.parse(element.pu.toString()),
          quantite_unite_superficie:
              double.parse(element.quantite_unite_superficie.toString()),
          produit_id: int.parse(element.produit_id.toString()),
          produit_name: element.produit_name,
          famille_charge_exploitation_id:
              int.parse(element.famille_charge_exploitation_id.toString()),
          famille_charge_exploitation_name:
              element.famille_charge_exploitation_name,
          type_charge_exploitation_id:
              int.parse(element.type_charge_exploitation_id.toString()),
          type_charge_exploitation_name: element.type_charge_exploitation_name,
          isAchat: element.isAchat.toString() == 'true' ? true : false));
    }
    return listmesChargeExploitationObject;
  }

  _montantCharge(int idCharge) {
    double pu = mapPuControlleur[idCharge]!.text.isNotEmpty
        ? double.parse(mapPuControlleur[idCharge]!.text)
        : 0;
    double quantite = mapQuantiteControlleur[idCharge]!.text.isNotEmpty
        ? double.parse(mapQuantiteControlleur[idCharge]!.text)
        : 0;
    double produit = pu * quantite;
    // return mapValeurCharge[idCharge] = produit  ;
    // mapValeurCharge[idCharge] = produit  ;
    return produit;
  }

  _addCharge(int idCharge) {
    double pu = mapPuControlleur[idCharge]!.text.isNotEmpty
        ? double.parse(mapPuControlleur[idCharge]!.text)
        : 0;
    double quantite = mapQuantiteControlleur[idCharge]!.text.isNotEmpty
        ? double.parse(mapQuantiteControlleur[idCharge]!.text)
        : 0;
  }

  _generateTypeChargeExploitationItems() {
    final typeChargeExploitationsBox = ObjectBox.typeChargeExploitationsBox;
    var mesTypeChargeExploitationsBox = typeChargeExploitationsBox!.getAll();

    mesTypeChargeExploitationsBox.forEach((element) {
      listTypeChargeExploitationObject.add(
          TypeChargeExploitationObject(id: element.id, name: element.name));
    });
  }

  _sumTypeChargeExploitationItems(
      int idTypeChargeExploitation, int idExploitation) {
    final exploitationChargeExploitationBox =
        ObjectBox.exploitationChargeExploitationBox;
    final builder = exploitationChargeExploitationBox!.query(
        ExploitationChargeExploitationObject_.exploitation_id
            .equals(idExploitation)
            .and(ExploitationChargeExploitationObject_
                .type_charge_exploitation_id
                .equals(idTypeChargeExploitation)));

    final query = builder.build();

    final mesExploitationChargeExploitationBox = query.find();

    double sum = mesExploitationChargeExploitationBox.fold(
        0, (sum, element) => sum.toDouble() + element.valeur);
    // print('SUM --- ${idTypeChargeExploitation}----- ${idExploitation}-------- : ${sum}');
    return sum;
  }

  _sumAllExploitationItems(int idExploitation) {
    final exploitationChargeExploitationBox =
        ObjectBox.exploitationChargeExploitationBox;
    final builder = exploitationChargeExploitationBox!.query(
        ExploitationChargeExploitationObject_.exploitation_id
            .equals(idExploitation));
    final query = builder.build();
    final mesExploitationChargeExploitationBox = query.find();
    double sum = mesExploitationChargeExploitationBox.fold(
        0, (sum, element) => sum.toDouble() + element.valeur);
    return sum;
  }

  _generateAnneesItems() {
    List<DropdownItem> list = [];
    final anneeBox = ObjectBox.anneesBox;
    var mesAnnees = anneeBox?.getAll();
    mesAnnees?.forEach((element) {
      list.add(DropdownItem(
          id: element.id.toString(),
          value: element.name.toString(),
          data: AnneeObject(
            id: element.id,
            valeur: element.valeur,
            name: element.name,
          )));
    });

    setState(() {
      _itemAnneesList = list;
    });
  }

  _generateSaisonsItems() {
    List<DropdownItem> list = [];
    final saisonBox = ObjectBox.saisonsBox;
    var mesSaisons = saisonBox?.getAll();
    mesSaisons?.forEach((element) {
      print(element.name);
      list.add(DropdownItem(
          id: element.id.toString(),
          value: element.name.toString(),
          data: SaisonObject(
            id: element.id,
            name: element.name,
            description: element.description,
          )));
    });
    setState(() {
      _itemSaisonsList = list;
    });
  }

  _generateVarietesItems() {
    List<DropdownItem> list = [];
    final varieteBox = ObjectBox.varietesBox;
    var mesVarietes = varieteBox?.getAll();
    mesVarietes?.forEach((element) {
      print(element.name);
      list.add(DropdownItem(
          id: element.id.toString(),
          value: element.produit_name.toString().toUpperCase() +
              ' | ' +
              element.name.toString().toUpperCase(),
          data: VarieteObject(
            id: element.id,
            name: element.name,
            surface_unite: element.surface_unite,
            quantite_unite: element.quantite_unite,
            rendement_unite: element.rendement_unite,
            produit_id: element.produit_id,
            produit_name: element.produit_name,
            filiere_id: element.filiere_id,
            filiere_name: element.filiere_name,
            familleemplacement_id: element.familleemplacement_id,
            familleemplacement_name: element.familleemplacement_name,
          )));
    });
    setState(() {
      _itemVarietesList = list;
    });
  }

  Future<ExploitationObject?> insertBoxExploitationObject(
      ExploitationObject exploitationObject) async {
    // int idExploitation = 0;
    try {
      final exploitationsBox = ObjectBox.exploitationsBox;
      ExploitationObject object = ExploitationObject(
        id: exploitationObject.id,
        compte: exploitationObject.compte,
        producteur_id: 0,
        prenom: '',
        nom: '',
        cni: '',
        email: '',
        is_actif: false,
        op_id: 0,
        op_name: '',
        type_op_id: 0,
        type_op_name: '',
        exploitation_id: 0,
        unite: exploitationObject.unite,
        superficie_prevision:
            double.parse(exploitationObject.superficie_prevision.toString()),
        production_prevision:
            double.parse(exploitationObject.production_prevision.toString()),
        pu_prevision: double.parse(exploitationObject.pu_prevision.toString()),
        filiere_prevision_id:
            int.parse(exploitationObject.filiere_prevision_id.toString()),
        filiere_prevision_name: exploitationObject.filiere_prevision_name,
        produit_prevision_id:
            int.parse(exploitationObject.produit_prevision_id.toString()),
        produit_prevision_name: exploitationObject.produit_prevision_name,
        variete_prevision_id:
            int.parse(exploitationObject.variete_prevision_id.toString()),
        variete_prevision_name: exploitationObject.variete_prevision_name,
        superficie: double.parse(exploitationObject.superficie.toString()),
        production: double.parse(exploitationObject.production.toString()),
        pu: double.parse(exploitationObject.pu.toString()),
        filiere_id: int.parse(exploitationObject.filiere_id.toString()),
        filiere_name: exploitationObject.filiere_name,
        produit_id: int.parse(exploitationObject.produit_id.toString()),
        produit_name: exploitationObject.produit_name,
        variete_id: int.parse(exploitationObject.variete_id.toString()),
        variete_name: exploitationObject.variete_name,
        saison_id: int.parse(exploitationObject.saison_id.toString()),
        saison_name: exploitationObject.saison_name,
        annne_id: int.parse(exploitationObject.annne_id.toString()),
        annee_name: exploitationObject.annee_name,
      );

      int idExploitation = exploitationsBox!.put(object);

      ExploitationObject? monExploitation =
          exploitationsBox.get(idExploitation);

      return monExploitation;
    } catch (e) {
      print(' ---Error------- ${e}');
      return null;
    }
  }

  void _showDialogAddOrUpdate(BuildContext context) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text(title),
          content: const Text("You are awesome!"),
          actions: <Widget>[
            TextButton(
              child: const Text("ANNULER"),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
            if (args["AddOrUpdate"] == 'ADD')
              TextButton(
                child: const Text("AJOUTER"),
                onPressed: () {
                  /// AJOUTER DANS LE STORE
                  //try {
                  final varieteBox = ObjectBox.varietesBox;
                  VarieteObject? varieteObject =
                      varieteBox!.get(int.parse(_singleSelectedVarieteId));
                  String _singleSelectedVarieteName = varieteObject!.name;
                  _singleSelectedProduitId =
                      varieteObject.produit_id.toString();
                  String _singleSelectedProduitName =
                      varieteObject.produit_name;
                  _singleSelectedFiliereId =
                      varieteObject.filiere_id.toString();
                  String _singleSelectedFiliereName =
                      varieteObject.filiere_name;

                  final saisonBox = ObjectBox.saisonsBox;
                  SaisonObject? saisonObject =
                      saisonBox!.get(int.parse(_singleSelectedSaisonId));
                  String _singleSelectedSaisonName = saisonObject!.name;

                  final anneeBox = ObjectBox.anneesBox;
                  AnneeObject? anneeObject =
                      anneeBox!.get(int.parse(_singleSelectedAnneeId));
                  String _singleSelectedAnneeName = anneeObject!.name;

                  Box<ExploitationObject>? exploitationsBox;
                  ExploitationObject objectExploitation = ExploitationObject(
                    id: 0,
                    producteur_id: 0,
                    prenom: '',
                    nom: '',
                    cni: '',
                    email: '',
                    is_actif: false,
                    op_id: 0,
                    op_name: '',
                    type_op_id: 0,
                    type_op_name: '',
                    exploitation_id: 0,
                    compte: 'EX0004',
                    unite: 'T',
                    superficie_prevision: 0,
                    production_prevision: 0,
                    pu_prevision: 0,
                    filiere_prevision_id: 0,
                    filiere_prevision_name: '',
                    produit_prevision_id: 0,
                    produit_prevision_name: '',
                    variete_prevision_id: 0,
                    variete_prevision_name: '',
                    superficie: double.parse(surfaceController.text),
                    production: double.parse(productionController.text),
                    pu: double.parse(puController.text),
                    filiere_id: int.parse(_singleSelectedFiliereId.toString()),
                    filiere_name: _singleSelectedFiliereName,
                    variete_id: int.parse(_singleSelectedVarieteId),
                    variete_name: _singleSelectedVarieteName,
                    produit_id: int.parse(_singleSelectedProduitId),
                    produit_name: _singleSelectedProduitName,
                    saison_id: int.parse(_singleSelectedSaisonId),
                    saison_name: _singleSelectedSaisonName,
                    annne_id: int.parse(_singleSelectedAnneeId),
                    annee_name: _singleSelectedAnneeName,
                  );
                  /*
                print(
                'id - ${objectExploitation.variete_id} \n'
                'variete_id - ${objectExploitation.variete_id} \n'
                    'variete_name - ${objectExploitation.variete_name} \n'
                    'produit_id - ${objectExploitation.produit_id} \n'
                    'produit_name - ${objectExploitation.produit_name}\n'
                    'filiere_id - ${objectExploitation.filiere_id}\n'
                    'filiere_name - ${objectExploitation.filiere_name}\n'
                    'saison_id - ${objectExploitation.saison_id}\n'
                    'saison_name - ${objectExploitation.saison_name}\n'
                    'annne_id - ${objectExploitation.annne_id}\n'
                    'annee_name - ${objectExploitation.annee_name}\n'
                    'superficie - ${objectExploitation.superficie}\n'
                    'pu - ${objectExploitation.pu}\n'
                    'production - ${objectExploitation.production}\n');

                 */

                  Future<ExploitationObject?> monExploitation =
                      insertBoxExploitationObject(objectExploitation);

                  if (monExploitation != null) {
                    monExploitation.then((value) {
/*
            print(
                'id - ${value!.id} \n'
                    'compte - ${value!.compte} \n'
                'variete_id - ${value!.variete_id} \n'
                'variete_name - ${value!.variete_name} \n'
                'produit_id - ${value!.produit_id} \n'
                'produit_name - ${value!.produit_name}\n'
                'filiere_id - ${value!.filiere_id}\n'
                'filiere_name - ${value!.filiere_name}\n'
                'saison_id - ${value!.saison_id}\n'
                'saison_name - ${value!.saison_name}\n'
                'annne_id - ${value!.annne_id}\n'
                'annee_name - ${value!.annee_name}\n'
                'superficie - ${value!.superficie}\n'
                'pu - ${value!.pu}\n'
                'production - ${value!.production}\n');

 */
                    });

                    /// FIN AJOUT
                    /// GET ID AND COMPTE
                    ///
                    args["AddOrUpdate"] = 'UPDATE';

                    Navigator.of(context).pop();
                    _tabController.index = 1;
                  }

                  // Navigator.of(context).pop();
                  // Get.toNamed('/exploitationPage', arguments: {"title": "Liste Comptes", "utilisateur": ApiConstants.utilisateur});
                  /*
                }
                catch (e) {
                  print(' ---Error------- ${e.toString()}');
                }

                 */
                },
              ),
            if (args["AddOrUpdate"] == 'UPDATE')
              TextButton(
                child: const Text("MODIFIER"),
                onPressed: () {
                  Navigator.of(context).pop();
                  _tabController.index = 1;

                  // Navigator.of(context).pop();
                  // Get.toNamed('/exploitationPage', arguments: {"title": "Liste Comptes", "utilisateur": ApiConstants.utilisateur});
                },
              ),
          ],
        );
      },
    );
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    title = (args["AddOrUpdate"] == 'ADD')
        ? 'ADD COMPTE'
        : 'UPDATE COMPTE: ' + ApiConstants.exploitationObject.compte;
    labelButton = (args["AddOrUpdate"] == 'ADD') ? 'AJOUTER >>' : 'MODIFIER >>';

    final _headerStyle = const TextStyle(
        color: Color(0xffffffff), fontSize: 15, fontWeight: FontWeight.bold);
    final _contentStyleHeader = const TextStyle(
        color: Color(0xff999999), fontSize: 14, fontWeight: FontWeight.w700);
    final _contentStyle = const TextStyle(
        color: Color(0xff999999), fontSize: 14, fontWeight: FontWeight.normal);
    final _loremIpsum =
        '''Lorem ipsum is typically a corrupted version of 'De finibus bonorum et malorum', a 1st century BC text by the Roman statesman and philosopher Cicero, with words altered, added, and removed to make it nonsensical and improper Latin.''';

    return Scaffold(
      appBar: AppBar(
        title: Text('${title}'),
        leading: GestureDetector(
          child: Icon(
            Icons.arrow_back_ios,
            color: Colors.black,
          ),
          onTap: () => Get.toNamed('/exploitationPage', arguments: {
            "title": "Liste Comptes",
            "utilisateur": ApiConstants.utilisateur
          }),
        ),
      ),
      // drawer: NavDrawer(),
      body: GFTabBarView(controller: _tabController, children: <Widget>[
        Container(
          color: Colors.white,
          padding: const EdgeInsets.all(20),
          child: SingleChildScrollView(
            child: Column(
              children: [
                Dropdown.singleSelection(
                    title: "CHOISIR UNE ANNEE",
                    labelText: "ANNEE",
                    hintText: "Selection année",
                    list: _itemAnneesList,
                    selectedId: _singleSelectedAnneeId,
                    onSingleItemListener: (selectedItem) {
                      setState(() {
                        _singleSelectedAnneeId = selectedItem.id;
                      });
                      String itemId = selectedItem.id;
                      String itemName = selectedItem.value;
                      AnneeObject anneeObject =
                          selectedItem.data as AnneeObject;
                      print(
                          "Item Id: $itemId -- Item Name: $itemName ## Other Details ## Annee Id: ${anneeObject.id} -- Annee valeur: ${anneeObject.valeur}");
                    }),
                const SizedBox(
                  height: 20,
                ),
                /*
              Dropdown.multiSelection(
                  title: "Multi Selection Dropdown",
                  labelText: "Multi",
                  hintText: "Multi Selection",
                  list: _itemAnneesList,
                  selectedIds: _mutiSelectedIds,
                  allSelection: true,
                  onMultipleItemListener: (selectedItemList) {
                    for (DropdownItem selectedItem in selectedItemList) {
                      String itemId = selectedItem.id;
                      String itemName = selectedItem.value;
                      AnneeObject anneeObject = selectedItem.data as AnneeObject;
                      print("Item Id: $itemId -- Item Name: $itemName ## Other Details ## Annee Id: ${anneeObject.id} -- Annee valeur: ${anneeObject.valeur}");                   }
                  }),
              const SizedBox(
                height: 20,
              ),

               */

                Dropdown.singleSelection(
                    title: "CHOISIR UNE SAISON",
                    labelText: "SAISON",
                    hintText: "Selection saison",
                    list: _itemSaisonsList,
                    selectedId: _singleSelectedSaisonId,
                    onSingleItemListener: (selectedItem) {
                      setState(() {
                        _singleSelectedSaisonId = selectedItem.id;
                      });
                      String itemId = selectedItem.id;
                      String itemName = selectedItem.value;
                      SaisonObject saisonObject =
                          selectedItem.data as SaisonObject;
                      print(
                          "Item Id: $itemId -- Item Name: $itemName ## Other Details ## Saison Id: ${saisonObject.id} -- Annee annee: ${saisonObject.name}");
                    }),
                const SizedBox(
                  height: 20,
                ),
                Dropdown.singleSelection(
                    title: "CHOISIR UNE VARIETE",
                    labelText: "VARIETE",
                    hintText: "Selection variété",
                    list: _itemVarietesList,
                    selectedId: _singleSelectedVarieteId,
                    onSingleItemListener: (selectedItem) {
                      setState(() {
                        _singleSelectedVarieteId = selectedItem.id;
                      });
                      String itemId = selectedItem.id;
                      String itemName = selectedItem.value;
                      VarieteObject varieteObject =
                          selectedItem.data as VarieteObject;
                      unitesurface = varieteObject.surface_unite!;
                      rendement_theorique = varieteObject.rendement_unite!;
                      quantiteproduit = varieteObject.quantite_unite!;
                      print(
                          "Item Id: $itemId -- Item Name: $itemName ## Other Details ## Variete Id: ${varieteObject.id} -- Variete name: ${varieteObject.name}");
                    }),
                /*
              if(args["AddOrUpdate"] == 'UPDATE')const SizedBox(height: 15,),
              if(args["AddOrUpdate"] == 'UPDATE')Card(
                shape: RoundedRectangleBorder(
                  side: BorderSide(
                    color: Colors.green.shade300,
                  ),
                  borderRadius: BorderRadius.circular(15.0),
                ),
                child: ListTile(
                  leading: const Icon(Icons.done_all),
                  title: Text('N° COMPTE: ' + _compte),
                ),
              ),
               */
                if (_singleSelectedVarieteId.length > 0)
                  const SizedBox(
                    height: 20,
                  ),
                if (_singleSelectedVarieteId.length > 0)
                  TextField(
                    controller: surfaceController,
                    readOnly: false,
                    textAlign: TextAlign.right,
                    inputFormatters: <TextInputFormatter>[
                      FilteringTextInputFormatter.allow(
                          RegExp(_getRegexString())),
                      TextInputFormatter.withFunction(
                        (oldValue, newValue) => newValue.copyWith(
                          text: newValue.text.replaceAll('.', ','),
                        ),
                      ),
                    ],
                    decoration: InputDecoration(
                      labelText: 'Surface ( $unitesurface )',
                      labelStyle:
                          TextStyle(fontSize: 15, color: Colors.grey.shade400),
                      border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10)),
                    ),
                    keyboardType:
                        TextInputType.numberWithOptions(decimal: true),
                  ),
                if (_singleSelectedVarieteId.length > 0)
                  const SizedBox(
                    height: 15,
                  ),
                if (_singleSelectedVarieteId.length > 0)
                  TextField(
                    controller: productionController,
                    readOnly: false,
                    textAlign: TextAlign.right,
                    inputFormatters: <TextInputFormatter>[
                      FilteringTextInputFormatter.allow(
                          RegExp(_getRegexString())),
                      TextInputFormatter.withFunction(
                        (oldValue, newValue) => newValue.copyWith(
                          text: newValue.text.replaceAll('.', ','),
                        ),
                      ),
                    ],
                    decoration: InputDecoration(
                        labelText: 'Quantité produite (${quantiteproduit})',
                        labelStyle: TextStyle(
                            fontSize: 15, color: Colors.grey.shade400),
                        border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(10))),
                    keyboardType:
                        TextInputType.numberWithOptions(decimal: true),
                  ),
                if (_singleSelectedVarieteId.length > 0)
                  const SizedBox(
                    height: 15,
                  ),
                if (_singleSelectedVarieteId.length > 0)
                  TextField(
                    controller: puController,
                    readOnly: false,
                    textAlign: TextAlign.right,
                    inputFormatters: <TextInputFormatter>[
                      FilteringTextInputFormatter.allow(
                          RegExp(_getRegexString())),
                      TextInputFormatter.withFunction(
                        (oldValue, newValue) => newValue.copyWith(
                          text: newValue.text.replaceAll('.', ','),
                        ),
                      ),
                    ],
                    decoration: InputDecoration(
                        labelText: "Prix unitaire (CFA)",
                        labelStyle: TextStyle(
                            fontSize: 15, color: Colors.grey.shade400),
                        border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(10))),
                    keyboardType:
                        TextInputType.numberWithOptions(decimal: true),
                  ),
                if (_singleSelectedVarieteId.length > 0)
                  const SizedBox(
                    height: 15,
                  ),
                if (_singleSelectedVarieteId.length > 0)
                  Card(
                    shape: RoundedRectangleBorder(
                      side: BorderSide(
                        color: Colors.green.shade300,
                      ),
                      borderRadius: BorderRadius.circular(15.0),
                    ),
                    child: ListTile(
                      // leading: const Icon(Icons.done_all),
                      title: Text('Rend.( Théo: ' +
                          rendement_theorique.toString() +
                          ' / ' +
                          unitesurface +
                          ' )'),
                      // subtitle: Text('Théorique: ' + rendement_theorique.toString() + ' / ' + unitesurface) ,
                    ),
                  ),
                if (_singleSelectedVarieteId.length > 0)
                  const SizedBox(
                    height: 20,
                  ),
                if (_singleSelectedVarieteId.length > 0)
                  GFButton(
                    onPressed: () {
                      _showDialogAddOrUpdate(context);
                      /*
                  if(args["AddOrUpdate"] == 'ADD'){

                      /// AJOUTER DANS LE STORE
                      ///
                      final varieteBox  = ObjectBox.varietesBox;
                      VarieteObject? varieteObject = varieteBox!.get(int.parse(_singleSelectedVarieteId));
                      String _singleSelectedVarieteName = varieteObject!.name;
                      _singleSelectedProduitId = varieteObject.produit_id.toString();
                      String _singleSelectedProduitName = varieteObject.produit_name;
                      _singleSelectedFiliereId = varieteObject.filiere_id.toString();
                      String _singleSelectedFiliereName = varieteObject.filiere_name;

                      final saisonBox  = ObjectBox.saisonsBox;
                      SaisonObject? saisonObject = saisonBox!.get(int.parse(_singleSelectedSaisonId));
                      String _singleSelectedSaisonName = saisonObject!.name;

                      final anneeBox  = ObjectBox.anneesBox;
                      AnneeObject? anneeObject = anneeBox!.get(int.parse(_singleSelectedAnneeId));
                      String _singleSelectedAnneeName = anneeObject!.name;

                      Box<ExploitationObject>? exploitationsBox;
                      ExploitationObject objectExploitation = ExploitationObject(
                        id: 0,
                        compte: 'EX0004',
                        unite: 'T',
                        superficie_prevision: 0 ,
                        production_prevision: 0 ,
                        pu_prevision: 0 ,
                        filiere_prevision_id: 0 ,
                        filiere_prevision_name: '',
                        produit_prevision_id: 0,
                        produit_prevision_name: '',
                        variete_prevision_id: 0,
                        variete_prevision_name: '',
                        superficie: double.parse(surfaceController.text) ,
                        production: double.parse(productionController.text) ,
                        pu: double.parse(puController.text) ,
                        filiere_id: int.parse(_singleSelectedFiliereId.toString()) ,
                        filiere_name: _singleSelectedFiliereName,
                        variete_id: int.parse(_singleSelectedVarieteId) ,
                        variete_name: _singleSelectedVarieteName,
                        produit_id: int.parse(_singleSelectedProduitId) ,
                        produit_name: _singleSelectedProduitName,
                        saison_id: int.parse(_singleSelectedSaisonId) ,
                        saison_name: _singleSelectedSaisonName,
                        annne_id: int.parse(_singleSelectedAnneeId) ,
                        annee_name: _singleSelectedAnneeName,

                      );
                      print('variete_id - ${objectExploitation.variete_id} \n'
                          'variete_name - ${objectExploitation.variete_name} \n'
                          'produit_id - ${objectExploitation.produit_id} \n'
                          'produit_name - ${objectExploitation.produit_name}\n'
                          'filiere_id - ${objectExploitation.filiere_id}\n'
                          'filiere_name - ${objectExploitation.filiere_name}\n'
                          'saison_id - ${objectExploitation.saison_id}\n'
                          'saison_name - ${objectExploitation.saison_name}\n'
                          'annne_id - ${objectExploitation.annne_id}\n'
                          'annee_name - ${objectExploitation.annee_name}\n'
                          'superficie - ${objectExploitation.superficie}\n'
                          'pu - ${objectExploitation.pu}\n'
                          'production - ${objectExploitation.production}\n');
                      int idExploitation = exploitationsBox!.put(objectExploitation);
                      print(' ----------------- idExploitation ----------- ${idExploitation}');




                      /// FIN AJOUT
                      /// GET ID AND COMPTE
                      ///
                      args["AddOrUpdate"] = 'UPDATE';


                      Navigator.of(context).pop();
                     // _tabController.index = 1;

                      // Navigator.of(context).pop();
                      // Get.toNamed('/exploitationPage', arguments: {"title": "Liste Comptes", "utilisateur": ApiConstants.utilisateur});
                    };

                   */
                    },
                    text: '${labelButton}',
                    shape: GFButtonShape.pills,
                    fullWidthButton: true,
                  )
              ],
            ),
          ),
        ),
        if (args["AddOrUpdate"] == 'ADD')
          Container(
            color: Colors.white,
            padding: const EdgeInsets.all(10),
            child: SingleChildScrollView(
              child: Column(
                children: <Widget>[],
              ),
            ),
          ),
        if (args["AddOrUpdate"] == 'UPDATE')
          Container(
            color: Colors.white,
            padding: const EdgeInsets.all(10),
            child: SingleChildScrollView(
              child: Column(
                children: <Widget>[
                  Container(
                    margin: const EdgeInsets.only(top: 16.0, bottom: 16.0),
                    child: AppBar(
                      title: StyledText(
                        //text: 'Test: <b>bold</b> text.',
                        text:
                            'TOTAL DES CHARGES: <b>${_sumAllExploitationItems(ApiConstants.exploitationObject.id)} Fcfa</b>',
                        tags: {
                          'b': StyledTextTag(
                              style: TextStyle(fontWeight: FontWeight.bold)),
                        },
                      ),
                      backgroundColor: Colors.orange,
                      elevation: 4.0,
                      automaticallyImplyLeading: false,
                      centerTitle: true,
                    ),
                  ),
                  Container(
                      child: Accordion(
                    maxOpenSections: 1,
                    headerBackgroundColorOpened: Colors.black54,
                    scaleWhenAnimating: true,
                    openAndCloseAnimation: true,
                    headerPadding:
                        const EdgeInsets.symmetric(vertical: 7, horizontal: 15),
                    sectionOpeningHapticFeedback: SectionHapticFeedback.heavy,
                    sectionClosingHapticFeedback: SectionHapticFeedback.light,
                    children: [
                      for (var value in listTypeChargeExploitationObject)
                        AccordionSection(
                          isOpen: true,
                          leftIcon: const Icon(Icons.compare_rounded,
                              color: Colors.white),
                          header: Text(
                              '${value.name}: ${_sumTypeChargeExploitationItems(value.id, ApiConstants.exploitationObject.id)}F',
                              style: _headerStyle),
                          contentBorderColor: const Color(0xffffffff),
                          headerBackgroundColorOpened: Colors.amber,
                          content: Accordion(
                            maxOpenSections: 1,
                            headerBackgroundColorOpened: Colors.black54,
                            headerPadding: const EdgeInsets.symmetric(
                                vertical: 7, horizontal: 15),
                            children: [
                              for (var val in _generateChargeExploitationItems(
                                  value.id, args["AddOrUpdate"]))
                                AccordionSection(
                                    isOpen: true,
                                    leftIcon: const Icon(Icons.food_bank,
                                        color: Colors.white),
                                    header: Text(
                                        '${val.name}: ${mapValeurCharge[val.id]}F',
                                        style: _headerStyle),
                                    content: Row(
                                      children: <Widget>[
                                        Expanded(
                                          flex: 2,
                                          child: TextField(
                                              controller:
                                                  mapQuantiteControlleur[
                                                      val.id],
                                              readOnly: false,
                                              textAlign: TextAlign.right,
                                              inputFormatters: <
                                                  TextInputFormatter>[
                                                FilteringTextInputFormatter
                                                    .allow(RegExp(
                                                        _getRegexString())),
                                                TextInputFormatter.withFunction(
                                                  (oldValue, newValue) =>
                                                      newValue.copyWith(
                                                    text: newValue.text
                                                        .replaceAll('.', ','),
                                                  ),
                                                ),
                                              ],
                                              decoration: InputDecoration(
                                                labelText: 'Quantité',
                                                labelStyle: TextStyle(
                                                    fontSize: 15,
                                                    color:
                                                        Colors.grey.shade400),
                                                contentPadding:
                                                    const EdgeInsets.symmetric(
                                                        vertical: 20.0,
                                                        horizontal: 20.0),
                                                border: OutlineInputBorder(
                                                    borderRadius:
                                                        BorderRadius.circular(
                                                            10)),
                                              ),
                                              keyboardType: TextInputType
                                                  .numberWithOptions(
                                                      decimal: true),
                                              onChanged: (value) {
                                                if (mapIconAddUpdate[val.id] ==
                                                    'Add') {
                                                  print(
                                                      'mapIconAddUpdate[val.id] == Add');
                                                }
                                                if (mapIconAddUpdate[val.id] ==
                                                    'Update') {
                                                  print(
                                                      'mapIconAddUpdate[val.id] == Update');
                                                }
                                                // setState(() => mapValeurCharge[val.id] = _montantCharge(val.id));
                                              }),
                                        ),
                                        Padding(
                                            padding:
                                                EdgeInsets.only(right: 5.0)),
                                        Expanded(
                                          flex: 2,
                                          child: TextField(
                                            controller:
                                                mapPuControlleur[val.id],
                                            readOnly: false,
                                            textAlign: TextAlign.right,
                                            inputFormatters: <
                                                TextInputFormatter>[
                                              FilteringTextInputFormatter.allow(
                                                  RegExp(_getRegexString())),
                                              TextInputFormatter.withFunction(
                                                (oldValue, newValue) =>
                                                    newValue.copyWith(
                                                  text: newValue.text
                                                      .replaceAll('.', ','),
                                                ),
                                              ),
                                            ],
                                            decoration: InputDecoration(
                                              labelText: 'Prix Unité',
                                              labelStyle: TextStyle(
                                                  fontSize: 15,
                                                  color: Colors.grey.shade400),
                                              contentPadding:
                                                  const EdgeInsets.symmetric(
                                                      vertical: 20.0,
                                                      horizontal: 20.0),
                                              border: OutlineInputBorder(
                                                  borderRadius:
                                                      BorderRadius.circular(
                                                          10)),
                                            ),
                                            keyboardType:
                                                TextInputType.numberWithOptions(
                                                    decimal: true),
                                          ),
                                        ),
                                        Expanded(
                                            flex: 1,
                                            child: IconButton(
                                              icon: mapIconAddUpdate[val.id] ==
                                                      'Add'
                                                  ? Icon(Icons.add)
                                                  : Icon(Icons
                                                      .change_circle_outlined),
                                              tooltip: 'Increase volume by 10',
                                              color: Colors.green,
                                              onPressed: () {
                                                ExploitationChargeExploitationObject
                                                    object =
                                                    ExploitationChargeExploitationObject(
                                                  id: 0,
                                                  unite: mapUnite[val.id]
                                                      .toString(),
                                                  date: DateTime.now(),
                                                  pu: double.parse(
                                                      mapPuControlleur[val.id]!
                                                          .text),
                                                  quantite: double.parse(
                                                      mapQuantiteControlleur[
                                                              val.id]!
                                                          .text),
                                                  valeur: double.parse((double.parse(
                                                              mapPuControlleur[
                                                                      val.id]!
                                                                  .text) *
                                                          double.parse(
                                                              mapQuantiteControlleur[
                                                                      val.id]!
                                                                  .text))
                                                      .toString()),
                                                  observation: '',
                                                  charge_exploitation_id:
                                                      int.parse(
                                                          mapChargeExploitationId[
                                                                  val.id]
                                                              .toString()),
                                                  charge_exploitation_name:
                                                      mapChargeExploitationName[
                                                              val.id]
                                                          .toString(),
                                                  type_charge_exploitation_id:
                                                      int.parse(
                                                          mapTypeChargeExploitationId[
                                                                  val.id]
                                                              .toString()),
                                                  type_charge_exploitation_name:
                                                      mapTypeChargeExploitationName[
                                                              val.id]
                                                          .toString(),
                                                  famille_exploitation_id:
                                                      int.parse(
                                                          mapChargeFamilleExploitationId[
                                                                  val.id]
                                                              .toString()),
                                                  famille_charge_exploitation_name:
                                                      mapTypeChargeExploitationName[
                                                              val.id]
                                                          .toString(),
                                                  exploitation_id: ApiConstants
                                                      .exploitationObject.id,
                                                );

                                                setState(() {
                                                  Box<ExploitationChargeExploitationObject>?
                                                      exploitationChargeExploitationBox =
                                                      ObjectBox
                                                          .exploitationChargeExploitationBox;
                                                  // setState(() => _montantCharge(val.id));
                                                  if (mapIconAddUpdate[
                                                          val.id] ==
                                                      'Add') {
                                                    print(
                                                        'mapIconAddUpdate[val.id] == Add');
                                                    exploitationChargeExploitationBox!
                                                        .put(object);
                                                  }
                                                  if (mapIconAddUpdate[
                                                          val.id] ==
                                                      'Update') {
                                                    print(
                                                        'mapIconAddUpdate[val.id] == Update : ${mapExploitationChargeExploitationId[val.id].toString()}');
                                                    ExploitationChargeExploitationObject?
                                                        eceObject =
                                                        exploitationChargeExploitationBox!
                                                            .get(
                                                                mapExploitationChargeExploitationId[
                                                                        val.id]!
                                                                    .toInt());
                                                    eceObject!.quantite =
                                                        double.parse(
                                                            mapQuantiteControlleur[
                                                                    val.id]!
                                                                .text);
                                                    eceObject.pu = double.parse(
                                                        mapPuControlleur[
                                                                val.id]!
                                                            .text);
                                                    eceObject
                                                        .valeur = double.parse((double.parse(
                                                                mapPuControlleur[
                                                                        val.id]!
                                                                    .text) *
                                                            double.parse(
                                                                mapQuantiteControlleur[
                                                                        val.id]!
                                                                    .text))
                                                        .toString());
                                                    // print('eceObject -- ${eceObject!.id} -- ${eceObject!.charge_exploitation_id} -- ${eceObject!.charge_exploitation_name} -- ${eceObject!.quantite} -- ${eceObject!.pu} -- ${eceObject!.valeur}');
                                                    exploitationChargeExploitationBox
                                                        .put(eceObject);
                                                  }
                                                });
                                              },
                                            )),
                                        Expanded(
                                            flex: 1,
                                            child: IconButton(
                                              icon: Icon(
                                                  Icons.delete_forever_rounded),
                                              tooltip: 'Increase volume by 10',
                                              color: Colors.red,
                                              onPressed: () {
                                                // setState(() {
                                                // setState(() => _montantCharge(val.id));
                                                if (mapIconAddUpdate[val.id] ==
                                                    'Add') {
                                                  print(
                                                      'mapIconAddUpdate[val.id] == Delete Add');
                                                }
                                                if (mapIconAddUpdate[val.id] ==
                                                    'Update') {
                                                  print(
                                                      'mapIconAddUpdate[val.id] == Delete Update');
                                                }
                                                // });
                                              },
                                            ))
                                      ],
                                    )),
                            ],
                          ),
                        ),
                    ],
                  )),
                ],
              ),
            ),
          ),
      ]),

      bottomNavigationBar: GFTabBar(
        length: 2,
        controller: _tabController,
        labelColor: Colors.white,
        tabBarColor: Colors.red,
        tabs: <Widget>[
          GestureDetector(
            child: Tab(text: 'Compte', icon: Icon(Icons.directions_bike)),
            onTap: () {
              _tabIndex = 0;
            },
          ),
          GestureDetector(
            child: Tab(text: 'Charges', icon: Icon(Icons.directions_car)),
            onTap: () {
              _tabIndex = 0;
            },
          ),
        ],
      ),
    );
  }

  String _getRegexString() => true ? r'[0-9]+[,.]{0,1}[0-9]*' : r'[0-9]';
}

class TextPartStyleDefinition {
  TextPartStyleDefinition({
    required this.pattern,
    required this.style,
  });

  final String pattern;
  final TextStyle style;
}

class StyleableTextFieldController extends TextEditingController {
  StyleableTextFieldController({
    required this.styles,
  }) : combinedPattern = styles.createCombinedPatternBasedOnStyleMap();

  final TextPartStyleDefinitions styles;
  final Pattern combinedPattern;
}

class TextPartStyleDefinitions {
  TextPartStyleDefinitions({required this.definitionList});

  final List<TextPartStyleDefinition> definitionList;

  RegExp createCombinedPatternBasedOnStyleMap() {
    final String combinedPatternString = definitionList
        .map<String>(
          (TextPartStyleDefinition textPartStyleDefinition) =>
              textPartStyleDefinition.pattern,
        )
        .join('|');

    return RegExp(
      combinedPatternString,
      multiLine: true,
      caseSensitive: false,
    );
  }
}
