import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:ges_op/ui/annee/widgets/all_annees_widget/bloc/all_annees_bloc.dart';
import 'package:ges_op/ui/exploitation/widgets/exploitations_widget/bloc/exploitation_bloc.dart';
import 'package:ges_op/ui/exploitation_charge_exploitation/widgets/ece_idExploitation/bloc/ece_id_exploitation_bloc.dart';
import 'package:ges_op/ui/exploitation_charge_exploitation/widgets/ece_idProduitIdTypeChargeIdExploitation/bloc/ece_id_produit_id_type_charge_id_exploitation_bloc.dart';
import 'package:ges_op/ui/producteur/widgets/producteurs_widget/bloc/producteur_bloc.dart';

import '../../../datas/repositories/repositories.dart';
import '../../../datas/services/db_service.dart';

import '../../../datas/services/services.dart';
import '../../type_charge_exploitation/widgets/type_charge_exploitations_idproduit/bloc/type_charge_exploitations_idproduit_bloc.dart';
import '../../variete/widgets/all_variete_widget/bloc/all_varietes_bloc.dart';

import 'exploitation_layout.dart';

class ExploitationPage extends StatelessWidget {
  const ExploitationPage({Key? key}) : super(key: key);
  static const String routeName = '/Exploitation';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        backgroundColor: Colors.deepOrangeAccent,
        // backgroundColor: Colors.white70,
        body: MultiRepositoryProvider(
            providers: [
              RepositoryProvider<ExploitationRepository>(
                create: (context) =>
                    ExploitationRepository(service: ExploitationService()),
              ),
              RepositoryProvider<ProducteurRepository>(
                create: (context) =>
                    ProducteurRepository(service: ProducteurService()),
              ),
              RepositoryProvider<VarieteRepository>(
                create: (context) =>
                    VarieteRepository(service: VarieteService()),
              ),
              RepositoryProvider<AnneeRepository>(
                create: (context) => AnneeRepository(service: AnneeService()),
              ),
              RepositoryProvider<TypeChargeExploitationRepository>(
                create: (context) => TypeChargeExploitationRepository(
                    service: TypeChargeExploitationService()),
              ),
              RepositoryProvider<ExploitationChargeExploitationRepository>(
                create: (context) => ExploitationChargeExploitationRepository(
                    service: ExploitationChargeExploitationService()),
              ),
            ],
            child: MultiBlocProvider(
              providers: [
                //-----------------BON -------------------
                BlocProvider<ExploitationBloc>(
                  create: (context) =>
                      ExploitationBloc(context.read<ExploitationRepository>()),
                ),
                BlocProvider<EceIdExploitationBloc>(
                  create: (context) => EceIdExploitationBloc(
                      context.read<ExploitationChargeExploitationRepository>()),
                ),

                BlocProvider<AllAnneesBloc>(
                  create: (context) =>
                      AllAnneesBloc(context.read<AnneeRepository>()),
                ),
                BlocProvider<ProducteurBloc>(
                  create: (context) =>
                      ProducteurBloc(context.read<ProducteurRepository>()),
                ),
                // ----------------- BON FIN ------------------
                BlocProvider<AllVarietesBloc>(
                  create: (context) => AllVarietesBloc(
                    varieteRepository: context.read<VarieteRepository>(),
                  )..add(GetAllVarietesEvent()),
                ),

                BlocProvider<TypeChargeExploitationsIdproduitBloc>(
                  create: (context) => TypeChargeExploitationsIdproduitBloc(
                    typeChargeExploitationRepository:
                        context.read<TypeChargeExploitationRepository>(),
                  )..add(GenerateTypeChargeExploitationsIdProduitEvent(
                      idProduit: 0,
                    )),
                ),
                BlocProvider<EceIdProduitIdTypeChargeIdExploitationBloc>(
                  create: (context) =>
                      EceIdProduitIdTypeChargeIdExploitationBloc(
                    exploitationChargeExploitationRepository: context
                        .read<ExploitationChargeExploitationRepository>(),
                  )..add(GenerateEceIdProduitIdTypeChargeIdExploitationEvent(
                          idProduit: 0,
                          idTypeChargeExploitation: 0,
                          idExploitation: 0)),
                ),
              ],
              child: ExploitationLayout(),
            )));
  }
}
