import 'package:flutter/material.dart';
import 'package:flutter/src/widgets/container.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../../../../models/models.dart';
import '../../../exploitation_charge_exploitation/widgets/ece_idExploitation/bloc/ece_id_exploitation_bloc.dart';
import '../../../exploitation_charge_exploitation/widgets/ece_idExploitation/bloc/ece_id_exploitation_event.dart';
import '../../../exploitation_charge_exploitation/widgets/ece_idExploitation/bloc/ece_id_exploitation_state.dart';

class ExploitationLigneWidget extends StatefulWidget {
  late int idExploitation;
  ExploitationLigneWidget({
    Key? key,
    required this.idExploitation,
  }) : super(key: key);

  @override
  State<ExploitationLigneWidget> createState() =>
      _ExploitationLigneWidgetState();
}

class _ExploitationLigneWidgetState extends State<ExploitationLigneWidget> {
  late EceIdExploitationBloc blocEceIdExploitation;
  @override
  void initState() {
    super.initState();
    blocEceIdExploitation = context.read<EceIdExploitationBloc>();
  }

  @override
  Widget build(BuildContext context) {
    return BlocConsumer<EceIdExploitationBloc, EceIdExploitationState>(
      listener: (context, state) {},
      builder: (context, state) {
        
        if (state is EceIdExploitationInitialState) {
          print(
              'xxxxxxxxxxxxxxxxxxxxxxxxx INITIAL:  ${widget.idExploitation}  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx');
          //if (widget.idExploitation == 0) widget.idExploitation = 1;

          context.read<EceIdExploitationBloc>().add(LoadEceIdExploitationEvent(
                idExploitation: widget.idExploitation,
              ));

          return const CircularProgressIndicator();
        } else if (state is EceIdExploitationLoadingState) {
          print(
              'xxxxxxxxxxxxxxxxxxxxxxxxx LOADING:  ${widget.idExploitation}  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx');
          return const Center(child: CircularProgressIndicator());
        } else 
        if (state is EceIdExploitationLoadedState) {
          print(
              'xxxxxxxxxxxxxxxxxxxxxxxxx LODEAD:  ${widget.idExploitation}  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx');

          // _generateExploitationChargeExploitation();
/*
          context
              .read<EceIdExploitationBloc>()
              .add(LoadEceIdExploitationEvent(idExploitation: widget.idExploitation));
*/
/*
          blocEceIdExploitation.add((LoadEceIdExploitationEvent(
              idExploitation: widget.idExploitation)));
*/
          List<ExploitationChargeExploitationObject>
              listExploitationChargeExploitationObject = state.apiResult;

          List<TypeChargeExploitationObject> listTypeChargeExploitationObject =
              [];

          listExploitationChargeExploitationObject.forEach((element) {
            listTypeChargeExploitationObject.removeWhere(
                (e) => element.type_charge_exploitation_id == e.id);

            listTypeChargeExploitationObject.add(TypeChargeExploitationObject(
                id: element.type_charge_exploitation_id,
                name: element.type_charge_exploitation_name));
          });

          List<ExploitationChargeExploitationObject> retourne(int typeCharge) {
            var retour = listExploitationChargeExploitationObject
                .where((o) => o.type_charge_exploitation_id == typeCharge)
                .toList();

            retour.forEach((element) {
              print(
                  '-- ${typeCharge} ---- ${element.charge_exploitation_name} ---- ${element.quantite} -- ${element.valeur} --------');
            });

            return retour;
          }

          return SizedBox(
            height: 600,
            child: Column(
              children: [
                Expanded(
                  child: MediaQuery.removePadding(
                    context: context,
                    removeTop: true,
                    child: ListView.builder(
                      itemCount: listTypeChargeExploitationObject == null
                          ? 0
                          : listTypeChargeExploitationObject.length,
                      itemBuilder: (context, index) {
                        return Container(
                          key:
                              ValueKey(listTypeChargeExploitationObject[index]),

                          margin: const EdgeInsets.only(bottom: 10, top: 12),
                          // height: 100,
                          padding: const EdgeInsets.only(
                              left: 20, right: 20, bottom: 5),
                          child: Container(
                            decoration: BoxDecoration(
                              color: Color(0xFF363f93),
                              borderRadius: const BorderRadius.only(
                                  topRight: Radius.circular(20.0)),
                              boxShadow: [
                                new BoxShadow(
                                    color: Color(0xFF363f93).withOpacity(0.3),
                                    offset: new Offset(-10.0, 10.0),
                                    blurRadius: 20.0,
                                    spreadRadius: 4.0),
                                //BoxShadow
                              ],
                            ),
                            padding: const EdgeInsets.only(
                                left: 6, top: 8.0, bottom: 6),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: <Widget>[
                                Text(
                                  listTypeChargeExploitationObject[index]
                                          .id
                                          .toString() +
                                      ' - ' +
                                      listTypeChargeExploitationObject[index]
                                          .name,
                                  style: TextStyle(
                                      fontSize: 14,
                                      color: Colors.white,
                                      fontWeight: FontWeight.bold),
                                ),
                                const SizedBox(
                                  height: 2,
                                ),
                                for (ExploitationChargeExploitationObject retour
                                    in retourne(
                                        listTypeChargeExploitationObject[index]
                                            .id))
                                  Text(
                                    '${retour.charge_exploitation_name} | QtÃ©: ${retour.quantite} PU: ${retour.pu} | Total: ${retour.valeur} |',
                                    style: TextStyle(
                                      fontSize: 13,
                                      color: Colors.white,
                                    ),
                                  ),
                                const SizedBox(
                                  height: 2,
                                ),
                              ],
                            ),
                          ),
                        );
                      },
                    ),
                  ),
                ),
              ],
            ),
          );
        } else if (state is EceIdExploitationErrorState) {
          return const Center(
            child: Text("Uh oh! ðŸ˜­ Something went wrong!"),
          );
        }
        return const Text("Error");

        /*
    return Column(
      children: [
        Container(
            height: 160,
            decoration: BoxDecoration(
              borderRadius: BorderRadius.only(
                bottomRight: Radius.circular(50),
              ),
              color: Color(0xFF363f93),
              boxShadow: [
                new BoxShadow(
                    color: Color(0xFF363f93).withOpacity(0.3),
                    offset: new Offset(-10.0, 10.0),
                    blurRadius: 20.0,
                    spreadRadius: 4.0),
                //BoxShadow
              ],
            ),
            child: Stack(
              children: [
                Positioned(
                    top: 50,
                    left: 0,
                    child: Container(
                      height: 80,
                      width: 300,
                      decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.only(
                          topRight: Radius.circular(50),
                          bottomRight: Radius.circular(50),
                        ),
                      ),
                    )),
              ],
            )),
        SizedBox(
          height: height * 0.02,
        ),
        Container(
          height: 290,
          child: Row(
            children: [
              /************************ INNER **********************/
              Expanded(
                child: FutureBuilder<List<ExploitationObject>>(
                  future: _foundExploitationObjects,
                  builder: (context, snapshot) {
                    if (snapshot.hasData) {
                      List<ExploitationObject>? data = snapshot.data;

                      return Column(mainAxisSize: MainAxisSize.min, children: [
                        Expanded(
                          child: PageView.builder(
                            //shrinkWrap: true,
                            scrollDirection: Axis.horizontal,
                            itemCount: data == null ? 0 : data.length,
                            onPageChanged: (index) {
                              idExploitation = snapshot.data![index].id;
                            },
                            itemBuilder: (context, index) {
                              var value = snapshot.data![index];
                              var compte =
                                  value.compte.isNotEmpty ? value.compte : '';
                              var filiere = '${value.filiere_name}';
                              var produit = '${value.produit_name}';
                              var variete = value.variete_name;
                              var surface = 'Surf.: ${value.superficie} Ha';
                              var op =
                                  'OP.: ${value.type_op_name} ${value.op_name}';
                              var producteur =
                                  'Producteur: ${value.prenom} ${value.nom}';
                              var production =
                                  'Prod.: ${value.production} ${value.unite}';
                              var annee = 'Annee: ${value.annee_name}';
                              var saison = value.saison_name;
                              var taux =
                                  ' ${_taux(value.production, value.superficie)} ${value.unite}/Ha';
                              return InkWell(
                                child: Card(
                                  key: ValueKey(snapshot.data![index].id),
                                  shape: RoundedRectangleBorder(
                                    side: BorderSide(
                                      color: Colors.green.shade300,
                                    ),
                                    borderRadius: BorderRadius.circular(15.0),
                                  ),
                                  child: Container(
                                    height: 290,
                                    child: Stack(
                                      children: [
                                        Positioned(
                                            child: Material(
                                          child: Container(
                                            height: 290,
                                            width: width,
                                            decoration: BoxDecoration(
                                              color: Colors.white,
                                              borderRadius:
                                                  BorderRadius.circular(0.0),
                                              boxShadow: [
                                                new BoxShadow(
                                                    color: Colors.grey
                                                        .withOpacity(0.3),
                                                    offset:
                                                        new Offset(-10.0, 10.0),
                                                    blurRadius: 20.0,
                                                    spreadRadius: 4.0),
                                                //BoxShadow
                                              ],
                                            ),
                                          ),
                                        )),
                                        Positioned(
                                            /*
                                                    top: 20,
                                                    left: 180,

                                                   */
                                            top: 20,
                                            left: 20,
                                            bottom: 20,
                                            child: Container(
                                              height: 290,
                                              // width: 160,
                                              child: Column(
                                                crossAxisAlignment:
                                                    CrossAxisAlignment.start,
                                                children: [
                                                  Text(
                                                    'NÂ°: ${(compte)}',
                                                    style: TextStyle(
                                                        fontSize: 18,
                                                        color:
                                                            Color(0xFF363f93),
                                                        fontWeight:
                                                            FontWeight.bold),
                                                  ),
                                                  Divider(color: Colors.black),
                                                  Text(
                                                    '${filiere} | ${produit} | ${variete}',
                                                    style: TextStyle(
                                                        fontSize: 18,
                                                        color: Colors.grey,
                                                        fontWeight:
                                                            FontWeight.bold),
                                                  ),
                                                  // Divider(color: Colors.black),
                                                  Text(
                                                    '${annee} | ${saison}',
                                                    style: TextStyle(
                                                        fontSize: 18,
                                                        color: Colors.grey,
                                                        fontWeight:
                                                            FontWeight.bold),
                                                  ),

                                                  Text(
                                                    '${surface} | ${production} | ${taux}',
                                                    style: TextStyle(
                                                        fontSize: 18,
                                                        color: Colors.grey,
                                                        fontWeight:
                                                            FontWeight.bold),
                                                  ),

                                                  Text(
                                                    '${op}',
                                                    style: TextStyle(
                                                        fontSize: 16,
                                                        color: Colors.grey,
                                                        fontWeight:
                                                            FontWeight.bold),
                                                  ),
                                                  // Divider(color: Colors.black),
                                                  Text(
                                                    '${producteur}',
                                                    style: TextStyle(
                                                        fontSize: 16,
                                                        color: Colors.grey,
                                                        fontWeight:
                                                            FontWeight.bold),
                                                  ),

                                                  Divider(color: Colors.black),
                                                  Text(
                                                    'Montant DÃ©penses',
                                                    style: TextStyle(
                                                        fontSize: 17,
                                                        color:
                                                            Color(0xFF363f93),
                                                        fontWeight:
                                                            FontWeight.bold),
                                                  ),

                                                  // Divider(color: Colors.black),
                                                  Text(
                                                    'Montant Produits',
                                                    style: TextStyle(
                                                        fontSize: 17,
                                                        color:
                                                            Color(0xFF363f93),
                                                        fontWeight:
                                                            FontWeight.bold),
                                                  ),

                                                  // Divider(color: Colors.black),
                                                  Text(
                                                    'RBE',
                                                    style: TextStyle(
                                                        fontSize: 17,
                                                        color:
                                                            Color(0xFF363f93),
                                                        fontWeight:
                                                            FontWeight.bold),
                                                  ),
                                                ],
                                              ),
                                            )),
                                      ],
                                    ),
                                  ),
                                ),
                                onDoubleTap: () {
                                  ApiConstants.exploitationObject.id = value.id;
                                  ApiConstants.exploitationObject.compte =
                                      value.compte;
                                  ApiConstants.exploitationObject.unite =
                                      value.unite;
                                  ApiConstants.exploitationObject
                                          .superficie_prevision =
                                      value.superficie_prevision;
                                  ApiConstants.exploitationObject
                                          .production_prevision =
                                      value.production_prevision;
                                  ApiConstants.exploitationObject.pu_prevision =
                                      value.pu_prevision;
                                  ApiConstants.exploitationObject.superficie =
                                      value.superficie;
                                  ApiConstants.exploitationObject.production =
                                      value.production;
                                  ApiConstants.exploitationObject.pu = value.pu;
                                  ApiConstants.exploitationObject.annne_id =
                                      value.annne_id;
                                  ApiConstants.exploitationObject.annee_name =
                                      value.annee_name;
                                  ApiConstants.exploitationObject.saison_id =
                                      value.saison_id;
                                  ApiConstants.exploitationObject.saison_name =
                                      value.saison_name;
                                  ApiConstants.exploitationObject.variete_id =
                                      value.variete_id;
                                  ApiConstants.exploitationObject.variete_name =
                                      value.variete_name;
                                  ApiConstants.exploitationObject.produit_id =
                                      value.produit_id;
                                  ApiConstants.exploitationObject.produit_name =
                                      value.produit_name;

                                  Get.toNamed('/editExploitationPage',
                                      arguments: {
                                        "AddOrUpdate": "UPDATE",
                                        "title": "Update Exploitation",
                                        "utilisateur": ApiConstants.utilisateur,
                                        "exploitationObject":
                                            ApiConstants.exploitationObject
                                      });
                                },
                              );
                            },
                          ),
                        ),
                      ]);
                    } else if (snapshot.hasError) {
                      return Text("${snapshot.error}");
                    }
                    // By default show a loading spinner.
                    return const CircularProgressIndicator();
                  },
                ),
              ),

              /************************ END INNER **********************/
            ],
          ),
        ),
        if (isDetail)
          Expanded(
            child: MediaQuery.removePadding(
                context: context,
                removeTop: true,
                child: ListView.builder(
                    itemCount: listTypeChargeExploitationObject == null
                        ? 0
                        : listTypeChargeExploitationObject.length,
                    itemBuilder: (context, index) {
                      return Container(
                        key: ValueKey(listTypeChargeExploitationObject[index]),

                        margin: const EdgeInsets.only(bottom: 10, top: 12),
                        // height: 100,
                        padding: const EdgeInsets.only(
                            left: 20, right: 20, bottom: 5),
                        child: Container(
                          decoration: BoxDecoration(
                            color: Color(0xFF363f93),
                            borderRadius: const BorderRadius.only(
                                topRight: Radius.circular(20.0)),
                            boxShadow: [
                              new BoxShadow(
                                  color: Color(0xFF363f93).withOpacity(0.3),
                                  offset: new Offset(-10.0, 10.0),
                                  blurRadius: 20.0,
                                  spreadRadius: 4.0),
                              //BoxShadow
                            ],
                          ),
                          padding: const EdgeInsets.only(
                              left: 6, top: 8.0, bottom: 6),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: <Widget>[
                              Text(
                                listTypeChargeExploitationObject[index].name,
                                style: TextStyle(
                                    fontSize: 14,
                                    color: Colors.white,
                                    fontWeight: FontWeight.bold),
                              ),
                              const SizedBox(
                                height: 2,
                              ),
                              for (var retour
                                  in _generateChargeExploitationItems(
                                      listTypeChargeExploitationObject[index]
                                          .id,
                                      IdProduit))
                                Text(
                                  '${retour.name} | QtÃ©: ${mapQuantiteCharge[retour.id]} PU: ${mapPuCharge[retour.id]} | Total: ${mapValeurCharge[retour.id]} |',
                                  style: TextStyle(
                                    fontSize: 13,
                                    color: Colors.white,
                                  ),
                                ),
                              const SizedBox(
                                height: 2,
                              ),
                              Text(
                                'TOTAUX: ${_sumTypeChargeExploitationItems(listTypeChargeExploitationObject[index].id)} FCFA ',
                                style: TextStyle(
                                    fontSize: 14,
                                    color: Colors.white,
                                    fontWeight: FontWeight.bold),
                              ),
                            ],
                          ),
                        ),
                      );
                    })),
          )
      ],
    
    );
    */
      },
    );
  }
}
