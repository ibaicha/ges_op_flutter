import 'package:dropdown_pro/dropdown.dart';
import 'package:dropdown_pro/dropdown_item.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:ges_op/ui/exploitation_charge_exploitation/widgets/ece_idExploitation/bloc/ece_id_exploitation_bloc.dart';
import 'package:get/get.dart';
import 'package:getwidget/components/accordion/gf_accordion.dart';

import '../../../../features/features.dart';
import '../../../../models/models.dart';
import '../../../annee/widgets/all_annees_widget/bloc/all_annees_bloc.dart';
import '../../../exploitation_charge_exploitation/widgets/ece_idExploitation/bloc/ece_id_exploitation_event.dart';
import '../../../exploitation_charge_exploitation/widgets/ece_idProduitIdTypeChargeIdExploitation/bloc/ece_id_produit_id_type_charge_id_exploitation_bloc.dart';
import '../../../type_charge_exploitation/widgets/type_charge_exploitations_idproduit/bloc/type_charge_exploitations_idproduit_bloc.dart';
import '../../../variete/widgets/all_variete_widget/bloc/all_varietes_bloc.dart';
import '../details_exploitation_widget/exploitation_lignes_widget.dart';
import 'bloc/exploitation_bloc.dart';

class ExploitationsWidget extends StatefulWidget {
  const ExploitationsWidget({super.key});

  @override
  State<ExploitationsWidget> createState() => _ExploitationsWidgetState();
}

class _ExploitationsWidgetState extends State<ExploitationsWidget> {
  late ExploitationBloc blocExploitation;
  late TypeChargeExploitationsIdproduitBloc
      blocTypeChargeExploitationsIdproduit;
  late EceIdExploitationBloc blocEceIdExploitation;

  late String compte = '';
  late List<String> listStringVarieteId = [];
  late List<String> listStringAnneeId = [];
  late int idProduit = 0;

  late int idTypeChargeExploitation = 0;

  late int idExploitation = 0;

  final _filtterController = TextEditingController();
  final List<String> _mutiSelectedVarietesIds = [];


  @override
  void initState() {
    super.initState();
    blocEceIdExploitation = context.read<EceIdExploitationBloc>();
    blocExploitation = context.read<ExploitationBloc>();
    blocTypeChargeExploitationsIdproduit =
        context.read<TypeChargeExploitationsIdproduitBloc>();
  }

  @override
  Widget build(BuildContext context) {
    final double height = MediaQuery.of(context).size.height;
    /*
    return BlocBuilder<ExploitationBloc,
        ExploitationState>(
      builder: (context, state) {
        return state.status.isSuccess
            ? ExploitationsSuccessWidget(
                compte: state.compte,
                listStringVarieteId: state.listStringVarieteId,
                listStringAnneeId: state.listStringAnneeId,
              )
            : state.status.isLoading
                ? Center(
                    child: CircularProgressIndicator(),
                  )
                : state.status.isError
                    ? ErrorOpWidget()
                    : const SizedBox();
      },
    );
    */

    return BlocConsumer<ExploitationBloc, ExploitationState>(
      listener: (context, state) {},
      builder: (context, state) {
        // context.read<GameDataBloc>().add(GameDataLoading());

        if (state is ExploitationInitialState) {
          context.read<ExploitationBloc>().add(LoadExploitationEvent(
              compte: compte,
              listStringVarieteId: listStringVarieteId,
              listStringAnneeId: listStringAnneeId));
          return const CircularProgressIndicator();
        } else if (state is ExploitationLoadingState) {
          return const Center(child: CircularProgressIndicator());
        } else if (state is ExploitationLoadedState) {
          ApiService().getRecordsObjectBox();
          return itemsExploitation(state.apiResult);
        } else if (state is ExploitationErrorState) {
          return const Center(
            child: Text("Uh oh! ðŸ˜­ Something went wrong!"),
          );
        }
        return const Text("Error");
      },
    );
  }

  Widget loadingEmptyWidget(BuildContext context) {
    return Container(
      child: Text('No data'),
    );
  }

  Widget itemExploitation(ExploitationObject Model) {
    var value = Model;
    var compte = value.compte.isNotEmpty ? value.compte : '';
    var filiere = '${value.filiere_name}';
    var produit = '${value.produit_name}';
    var variete = value.variete_name;
    var surface = 'Surf.: ${value.superficie} Ha';
    var op = 'OP.: ${value.type_op_name} ${value.op_name}';
    var producteur = 'Producteur: ${value.prenom} ${value.nom}';
    var production = 'Prod.: ${value.production} ${value.unite}';
    var annee = 'Annee: ${value.annee_name}';
    var saison = value.saison_name;
    var taux = 'Taux/Ha';

    return Column(
      children: [
        Expanded(
            child: InkWell(
          child: Card(
            key: ValueKey(value.id),
            shape: RoundedRectangleBorder(
              side: BorderSide(
                color: Colors.green.shade300,
              ),
              borderRadius: BorderRadius.circular(15.0),
            ),
            child: Container(
              height: 600,
              child: Stack(
                children: [
                  Positioned(
                      child: Material(
                    child: Container(
                      height: 600,
                      //width: width,
                      decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.circular(0.0),
                        boxShadow: [
                          new BoxShadow(
                              color: Colors.grey.withOpacity(0.3),
                              offset: new Offset(-10.0, 10.0),
                              blurRadius: 20.0,
                              spreadRadius: 4.0),
                          //BoxShadow
                        ],
                      ),
                    ),
                  )),
                  Positioned(
                      top: 20,
                      left: 20,
                      bottom: 20,
                      child: Container(
                        height: 600,
                        // width: 160,
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              'NÂ°: ${(compte)}',
                              style: TextStyle(
                                  fontSize: 18,
                                  color: Color(0xFF363f93),
                                  fontWeight: FontWeight.bold),
                            ),
                            Divider(color: Colors.black),
                            Text(
                              '${filiere} | ${produit} | ${variete}',
                              style: TextStyle(
                                  fontSize: 18,
                                  color: Colors.grey,
                                  fontWeight: FontWeight.bold),
                            ),
                            // Divider(color: Colors.black),
                            Text(
                              '${annee} | ${saison}',
                              style: TextStyle(
                                  fontSize: 18,
                                  color: Colors.grey,
                                  fontWeight: FontWeight.bold),
                            ),

                            Text(
                              '${surface} | ${production} | ${taux}',
                              style: TextStyle(
                                  fontSize: 18,
                                  color: Colors.grey,
                                  fontWeight: FontWeight.bold),
                            ),

                            Text(
                              '${op}',
                              style: TextStyle(
                                  fontSize: 16,
                                  color: Colors.grey,
                                  fontWeight: FontWeight.bold),
                            ),
                            // Divider(color: Colors.black),
                            Text(
                              '${producteur}',
                              style: TextStyle(
                                  fontSize: 16,
                                  color: Colors.grey,
                                  fontWeight: FontWeight.bold),
                            ),

                            Divider(color: Colors.black),
                            Text(
                              'Montant DÃ©penses',
                              style: TextStyle(
                                  fontSize: 17,
                                  color: Color(0xFF363f93),
                                  fontWeight: FontWeight.bold),
                            ),

                            // Divider(color: Colors.black),
                            Text(
                              'Montant Produits',
                              style: TextStyle(
                                  fontSize: 17,
                                  color: Color(0xFF363f93),
                                  fontWeight: FontWeight.bold),
                            ),

                            // Divider(color: Colors.black),
                            Text(
                              'RBE',
                              style: TextStyle(
                                  fontSize: 17,
                                  color: Color(0xFF363f93),
                                  fontWeight: FontWeight.bold),
                            ),
                          ],
                        ),
                      )),
                ],
              ),
            ),
          ),
          onDoubleTap: () {
            ApiConstants.exploitationObject.id = value.id;
            ApiConstants.exploitationObject.compte = value.compte;
            ApiConstants.exploitationObject.unite = value.unite;
            ApiConstants.exploitationObject.superficie_prevision =
                value.superficie_prevision;
            ApiConstants.exploitationObject.production_prevision =
                value.production_prevision;
            ApiConstants.exploitationObject.pu_prevision = value.pu_prevision;
            ApiConstants.exploitationObject.superficie = value.superficie;
            ApiConstants.exploitationObject.production = value.production;
            ApiConstants.exploitationObject.pu = value.pu;
            ApiConstants.exploitationObject.annne_id = value.annne_id;
            ApiConstants.exploitationObject.annee_name = value.annee_name;
            ApiConstants.exploitationObject.saison_id = value.saison_id;
            ApiConstants.exploitationObject.saison_name = value.saison_name;
            ApiConstants.exploitationObject.variete_id = value.variete_id;
            ApiConstants.exploitationObject.variete_name = value.variete_name;
            ApiConstants.exploitationObject.produit_id = value.produit_id;
            ApiConstants.exploitationObject.produit_name = value.produit_name;

            Get.toNamed('/editExploitationPage', arguments: {
              "AddOrUpdate": "UPDATE",
              "title": "Update Exploitation",
              "utilisateur": ApiConstants.utilisateur,
              "exploitationObject": ApiConstants.exploitationObject
            });
          },
        )),
        Expanded(
          child: Container(
            child:
                ExploitationLigneWidget(idExploitation: value.exploitation_id),
          ),
        ),
      ],
    );
  }

  Widget itemsExploitation(List<ExploitationObject> apiResult) {
    return Column(
      children: [
        Container(child: loadingFiltersWidget(context)),
        if (apiResult.isNotEmpty)
          SizedBox(
            height: 600,
            child: Flex(
              direction: Axis.vertical, // this is unique
              mainAxisAlignment: MainAxisAlignment.start,
              mainAxisSize: MainAxisSize.max,
              crossAxisAlignment: CrossAxisAlignment.center,
              verticalDirection: VerticalDirection.down,
              textDirection: TextDirection.rtl,
              children: [
                Expanded(
                  child: PageView.builder(
                    scrollDirection: Axis.horizontal,
                    itemCount: apiResult == null ? 0 : apiResult.length,
                    onPageChanged: (index) {
                      idProduit = apiResult[index].produit_id;
                      // idExploitation = apiResult[index].id;
                      // idExploitation = apiResult[index].id;
                      //_generateTypeChargeExploitation();

                      context
                          .read<EceIdExploitationBloc>()
                          .add(LoadEceIdExploitationEvent(
                            idExploitation: apiResult[index].exploitation_id,
                          ));
                    },
                    itemBuilder: (context, index) {
                      var value = apiResult[index];
                      ApiConstants.idExploitation = apiResult[index].id;

                      //_generateExploitationChargeExploitation(ApiConstants.idExploitation);

                      print('----------COUNT: ${apiResult.length}----------');

                      print(
                          '-- Compte: ${ApiConstants.idExploitation} | ${value.exploitation_id} | ${value.compte} -- VarietÃ©: ${value.variete_name}--------------');

                      return itemExploitation(apiResult[index]);
                    },
                  ),
                ),
              ],
            ),
          ),

        //if (apiResult.isNotEmpty)ExploitationLigneWidget(idExploitation: ApiConstants.idExploitation),
        if (apiResult.isEmpty)
          Container(
            color: Colors.red,
            width: MediaQuery.of(context).size.width * 0.93,
            height: MediaQuery.of(context).size.height * 0.2,
            child: Align(
              alignment: Alignment.center,
              child: Container(
                width: MediaQuery.of(context).size.width * 0.3,
                height: 50,
                color: Colors.amber,
                child: Align(
                  alignment: Alignment.center,
                  child: Text(
                    'NO DATA',
                    textAlign: TextAlign.center,
                  ),
                ),
              ),
            ),
          ),
      ],
    );
  }

  Widget loadingFiltersWidget(BuildContext context) {
    final double height = MediaQuery.of(context).size.height;
    return Column(
      children: [
        Container(
          child: GFAccordion(
              title: 'ACTIONS | FILTRAGE',
              collapsedTitleBackgroundColor: Colors.cyan,
              contentChild: Container(
                  child: Column(
                children: [
                  loadingCompteWidget(context),
                  SizedBox(
                    height: height * 0.02,
                  ),
                  loadingFiltersVarieteWidget(context),
                  SizedBox(
                    height: height * 0.02,
                  ),
                  loadingFiltersAnneesWidget(context),
                ],
              )),
              collapsedIcon: Icon(Icons.add),
              expandedIcon: Icon(Icons.minimize)),
        ),
        SizedBox(
          height: height * 0.005,
        ),
      ],
    );
  }

  Widget loadingCompteWidget(BuildContext context) {
    final double height = MediaQuery.of(context).size.height;
    return Container(
      child: TextField(
        controller: _filtterController,
        onChanged: (value) => _generateFilters(),
        decoration: const InputDecoration(
            labelText: 'Search', suffixIcon: Icon(Icons.search)),
      ),
    );
  }

  Widget loadingFiltersVarieteWidget(BuildContext context) {
    final double height = MediaQuery.of(context).size.height;
    List<DropdownItem> _itemVarietesList = [];
    String _singleSelectedVarieteId = "";

    return BlocBuilder<AllVarietesBloc, AllVarietesState>(
        builder: (context, stateVariete) {
      List<DropdownItem> list = [];

      var mesVarietes = stateVariete.varietes;
      for (var element in mesVarietes) {
        print(element.name);
        list.add(DropdownItem(
            id: element.id.toString(),
            value: element.produit_name.toString().toUpperCase() +
                ' | ' +
                element.name.toString().toUpperCase(),
            data: VarieteObject(
              id: element.id,
              name: element.name,
              surface_unite: element.surface_unite,
              quantite_unite: element.quantite_unite,
              rendement_unite: element.rendement_unite,
              produit_id: element.produit_id,
              produit_name: element.produit_name,
              filiere_id: element.filiere_id,
              filiere_name: element.filiere_name,
              familleemplacement_id: element.familleemplacement_id,
              familleemplacement_name: element.familleemplacement_name,
            )));
      }

      _itemVarietesList = list;

      return Column(
        children: [
          Dropdown.multiSelection(
              title: "CHOISIR VARIETES",
              labelText: "MULTI-VARIETES",
              hintText: "Selection varietes",
              list: _itemVarietesList,
              selectedIds: _mutiSelectedVarietesIds,
              isAllSelection: true,
              onMultipleItemListener: (selectedItemList) {
                for (DropdownItem selectedItem in selectedItemList) {
                  String itemId = selectedItem.id;
                  String itemName = selectedItem.value;
                  VarieteObject varieteObject =
                      selectedItem.data as VarieteObject;
                  //print("Item Id: $itemId -- Item Name: $itemName }");
                }

                ApiConstants.listStringVarieteId = _mutiSelectedVarietesIds;
                _generateFilters();

                for (int i = 0; i < _mutiSelectedVarietesIds.length; i++) {
                  print('-----${_mutiSelectedVarietesIds[i].toString()} ----');
                }
              }),
        ],
      );
    });
  }

  Widget loadingFiltersAnneesWidget(BuildContext context) {
    final double height = MediaQuery.of(context).size.height;
    List<DropdownItem> _itemAnneesList = [];
    String _singleSelectedAnneeId = "";
    final List<String> _mutiSelectedAnneesIds = [];

    return BlocBuilder<AllAnneesBloc, AllAnneesState>(
        builder: (context, anneeState) {
      List<DropdownItem> list = [];

      final anneeBox = ObjectBox.anneesBox;
      var mesAnnees = anneeBox?.getAll();
      mesAnnees?.forEach((element) {
        list.add(DropdownItem(
            id: element.id.toString(),
            value: element.name.toString(),
            data: AnneeObject(
              id: element.id,
              valeur: element.valeur,
              name: element.name,
            )));
      });

      _itemAnneesList = list;
      return Column(
        children: [
          Dropdown.multiSelection(
              title: "CHOISIR ANNEES",
              labelText: "MULTI-ANNEES",
              hintText: "Selection annees",
              list: _itemAnneesList,
              selectedIds: _mutiSelectedAnneesIds,
              isAllSelection: true,
              onMultipleItemListener: (selectedItemList) {
                for (DropdownItem selectedItem in selectedItemList) {
                  String itemId = selectedItem.id;
                  String itemName = selectedItem.value;
                  AnneeObject anneeObject = selectedItem.data as AnneeObject;
                  //print("Item Id: $itemId -- Item Name: $itemName }");
                }

                ApiConstants.listStringAnneeId = _mutiSelectedAnneesIds;
                // _onLoginButtonPressed();

                for (int i = 0; i < _mutiSelectedAnneesIds.length; i++) {
                  print('-----${_mutiSelectedAnneesIds[i].toString()} ----');
                }
              }),
        ],
      );
    });
  }

  Widget loadingDetailExploitationLignesWidget(
      BuildContext context, int idTCE) {
    return BlocBuilder<EceIdProduitIdTypeChargeIdExploitationBloc,
            EceIdProduitIdTypeChargeIdExploitationState>(
        builder: (context, stateECE) {
      BlocProvider.of<EceIdProduitIdTypeChargeIdExploitationBloc>(context).add(
          GenerateEceIdProduitIdTypeChargeIdExploitationEvent(
              idProduit: idProduit,
              idTypeChargeExploitation: idTCE,
              idExploitation: idExploitation));

      List<ExploitationChargeExploitationObject>
          listExploitationChargeExploitationObject =
          stateECE.exploitationChargeExploitations;

      return Column(
        children: <Widget>[
          for (var retour in listExploitationChargeExploitationObject)
            Text(
              '${retour.charge_exploitation_name} | QtÃ©: ${retour.quantite} PU: ${retour.pu} | Total: ${retour.valeur} |',
              style: TextStyle(
                fontSize: 13,
                color: Colors.white,
              ),
            ),
          const SizedBox(
            height: 2,
          ),
          Text(
            'TOTAUX: SOMME FCFA ',
            style: TextStyle(
                fontSize: 14, color: Colors.white, fontWeight: FontWeight.bold),
          ),
          Text(
            'IDPRODUIT: ${idProduit} IDTCE ${idTCE} IDEX: ${idExploitation} NOMBRE: ${listExploitationChargeExploitationObject.length}',
            style: TextStyle(
                fontSize: 14, color: Colors.white, fontWeight: FontWeight.bold),
          ),
          Text(
            'IDPRODUIT: ${stateECE.idProduit} IDTCE ${stateECE.idTypeChargeExploitation} IDEX: ${stateECE.idExploitation} NOMBRE: ${listExploitationChargeExploitationObject.length}',
            style: TextStyle(
                fontSize: 14, color: Colors.white, fontWeight: FontWeight.bold),
          ),
        ],
      );
    });
  }

  Widget loadingTypeChargeExploitationWidget(BuildContext context) {
    return BlocBuilder<TypeChargeExploitationsIdproduitBloc,
        TypeChargeExploitationsIdproduitState>(
      builder: (context, state) {
        List<TypeChargeExploitationObject> listTypeChargeExploitationObject =
            state.typeExploitationCharges;

        return Column(
          children: [
            Container(
              child: MediaQuery.removePadding(
                  context: context,
                  removeTop: true,
                  child: ListView.builder(
                      scrollDirection: Axis.vertical,
                      shrinkWrap: true,
                      itemCount: listTypeChargeExploitationObject == null
                          ? 0
                          : listTypeChargeExploitationObject.length,
                      itemBuilder: (context, index) {
                        return Container(
                          key:
                              ValueKey(listTypeChargeExploitationObject[index]),

                          margin: const EdgeInsets.only(bottom: 10, top: 12),
                          // height: 100,
                          padding: const EdgeInsets.only(
                              left: 20, right: 20, bottom: 5),
                          child: Container(
                            decoration: BoxDecoration(
                              color: Color(0xFF363f93),
                              borderRadius: const BorderRadius.only(
                                  topRight: Radius.circular(20.0)),
                              boxShadow: [
                                new BoxShadow(
                                    color: Color(0xFF363f93).withOpacity(0.3),
                                    offset: new Offset(-10.0, 10.0),
                                    blurRadius: 20.0,
                                    spreadRadius: 4.0),
                                //BoxShadow
                              ],
                            ),
                            padding: const EdgeInsets.only(
                                left: 6, top: 8.0, bottom: 6),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: <Widget>[
                                Text(
                                  listTypeChargeExploitationObject[index].name,
                                  style: TextStyle(
                                      fontSize: 14,
                                      color: Colors.white,
                                      fontWeight: FontWeight.bold),
                                ),
                                const SizedBox(
                                  height: 2,
                                ),
                                loadingDetailExploitationLignesWidget(context,
                                    listTypeChargeExploitationObject[index].id),
                                /* -------- ICI ----------------- 

                                DetailExploitationLignesWidget(
                                  idProduit: state.idProduit,
                                  idTypeChargeExploitation:
                                      listTypeChargeExploitationObject[index]
                                          .id,
                                  idExploitation: 1,
                                ),

                                -------- ICI FIN -------------*/
                              ],
                            ),
                          ),
                        );
                      })),
            )
          ],
        );
      },
    );
  }

  void _generateFilters() {
    blocExploitation.add((LoadExploitationEvent(
        compte: _filtterController.text,
        listStringVarieteId: _mutiSelectedVarietesIds,
        listStringAnneeId: listStringAnneeId)));
  }

  void _generateTypeChargeExploitation() {
    blocTypeChargeExploitationsIdproduit.add(
        (GenerateTypeChargeExploitationsIdProduitEvent(idProduit: idProduit)));
  }

  void _generateExploitationChargeExploitation(int idEx) {
    blocEceIdExploitation
        .add((LoadEceIdExploitationEvent(idExploitation: idEx)));
  }
}
