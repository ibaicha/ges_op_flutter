import 'dart:math';

import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';

import '../../../../../datas/repositories/repositories.dart';
import '../../../../../models/models.dart';

part 'exploitation_event.dart';
part 'exploitation_state.dart';

class ExploitationBloc extends Bloc<ExploitationEvent, ExploitationState> {
  final ExploitationRepository exploitationRepository;

  ExploitationBloc(
    this.exploitationRepository,
  ) : super(ExploitationInitialState()) {
    on<LoadExploitationEvent>(_ExploitationEvent);
  }

  void _ExploitationEvent(
    LoadExploitationEvent event,
    Emitter<ExploitationState> emitter,
  ) async {
    if (event is LoadExploitationEvent) {
      emitter(ExploitationLoadingState());
      // await Future.delayed(const Duration(milliseconds: 500));
      List<ExploitationObject>? apiResult =
          await exploitationRepository.getExploitationsBox(
              event.compte, event.listStringVarieteId, event.listStringAnneeId);
      if (apiResult == null) {
        emitter(ExploitationErrorState());
      } else {
        emitter(ExploitationLoadedState(
            apiResult: apiResult,
            compte: event.compte,
            listStringVarieteId: event.listStringVarieteId,
            listStringAnneeId: event.listStringAnneeId));
      }
    }
  }
}
