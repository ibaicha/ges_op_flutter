import 'dart:convert';

import 'package:http/http.dart' as http;
import 'package:http/http.dart';

import '../../../features/features.dart';
import '../../../models/models.dart';
import '../../modeles/modeles.dart';
import '../db_service.dart';

class ExploitationService {
  Future<List<ExploitationObject>> getExploitations() async {
    var url = Uri.parse(DbService.baseUrl + DbService.allvarietes);
    final response = await http.get(url, headers: {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      'Authorization': 'Bearer ${ApiConstants.token}',
    });
    if (response.statusCode == 200) {
      if (response.body.isNotEmpty) {
        List jsonResponse = json.decode(response.body);
        List<ExploitationObject> data =
            jsonResponse.map((e) => ExploitationObject.fromJson(e)).toList();

        print('ExploitationObject data.length: ${data.length}');
        for (ExploitationObject item in data) {
          print('ExploitationObject ${item.id}: ${item.compte}');
        }

        return data;
      } else {
        throw ErrorEmptyResponse();
      }
    } else {
      throw ErrorGettingExploitations('Error getting exploitations');
    }
  }

  Future<List<ExploitationObject>> getAllExploitationsFilters(String compte,
      List<String> listStringVarieteId, List<String> listStringAnneeId) async {
    final exploitationBox = ObjectBox.exploitationsBox;
    List<ExploitationObject> mesExploitations = [];

    if (listStringAnneeId.isEmpty && listStringVarieteId.isEmpty) {
      Query<ExploitationObject> query = exploitationBox!
          .query(ExploitationObject_.compte
              .contains(compte.toLowerCase())
              .or(ExploitationObject_.compte.contains(compte.toUpperCase()))
              .or(ExploitationObject_.compte.contains(compte)))
          .build();
      mesExploitations = query.find();
      print('--- mesExploitations AnneeId == '
          ' && VarieteId == '
          '  ---- ${mesExploitations}');
      query.close();
      // return mesExploitations;
    }
    if (listStringAnneeId.isNotEmpty && listStringVarieteId.isNotEmpty) {
      List<int> listIntVarieteId =
          listStringVarieteId.map((e) => int.parse(e)).toList();
      List<int> listIntAnneeId =
          listStringAnneeId.map((e) => int.parse(e)).toList();
      Query<ExploitationObject> query = exploitationBox!
          .query(ExploitationObject_.compte
              .contains(compte.toLowerCase())
              .or(ExploitationObject_.compte.contains(compte.toUpperCase()))
              .or(ExploitationObject_.compte.contains(compte))
              .and(ExploitationObject_.variete_id.oneOf(listIntVarieteId))
              .and(ExploitationObject_.annne_id.oneOf(listIntAnneeId)))
          .build();
      mesExploitations = query.find();
      print('--- mesExploitations AnneeId != '
          ' && VarieteId != '
          ' ---- ${mesExploitations}');
      query.close();
      // return mesExploitations;
    }
    if (listStringAnneeId.isNotEmpty && listStringVarieteId.isEmpty) {
      List<int> listIntVarieteId =
          listStringVarieteId.map((e) => int.parse(e)).toList();
      List<int> listIntAnneeId =
          listStringAnneeId.map((e) => int.parse(e)).toList();
      Query<ExploitationObject> query = exploitationBox!
          .query(ExploitationObject_.compte
              .contains(compte.toLowerCase())
              .or(ExploitationObject_.compte.contains(compte.toUpperCase()))
              .or(ExploitationObject_.compte.contains(compte))
              .and(ExploitationObject_.annne_id.oneOf(listIntAnneeId)))
          .build();
      mesExploitations = query.find();
      print('--- mesExploitations ---- AnneeId != '
          ' && VarieteId == '
          ' ${mesExploitations}');
      query.close();
      // return mesExploitations;
    }
    if (listStringAnneeId.isEmpty && listStringVarieteId.isNotEmpty) {
      List<int> listIntVarieteId =
          listStringVarieteId.map((e) => int.parse(e)).toList();
      Query<ExploitationObject> query = exploitationBox!
          .query(ExploitationObject_.compte
              .contains(compte.toLowerCase())
              .or(ExploitationObject_.compte.contains(compte.toUpperCase()))
              .or(ExploitationObject_.compte.contains(compte))
              .and(ExploitationObject_.variete_id.oneOf(listIntVarieteId)))
          .build();
      mesExploitations = query.find();
      print('--- mesExploitations ---- AnneeId == '
          ' && VarieteId == '
          ' ${mesExploitations}');
      query.close();
      // return mesExploitations;
    }
    return mesExploitations;
  }

  Future<List<ExploitationObject>> getAllExploitationsFiltersx(
      String compte, String AnneeId, String VarieteId) async {
    final exploitationBox = ObjectBox.exploitationsBox;
    List<ExploitationObject> mesExploitations = [];

    if (AnneeId.isEmpty && VarieteId.isEmpty) {
      Query<ExploitationObject> query = exploitationBox!
          .query(ExploitationObject_.compte
              .contains(compte.toLowerCase())
              .or(ExploitationObject_.compte.contains(compte.toUpperCase()))
              .or(ExploitationObject_.compte.contains(compte)))
          .build();
      mesExploitations = query.find();
      print('--- mesExploitations AnneeId == '
          ' && VarieteId == '
          '  ---- ${mesExploitations}');
      query.close();
      // return mesExploitations;
    }
    if (AnneeId.isNotEmpty && VarieteId.isNotEmpty) {
      Query<ExploitationObject> query = exploitationBox!
          .query(ExploitationObject_.compte
              .contains(compte.toLowerCase())
              .or(ExploitationObject_.compte.contains(compte.toUpperCase()))
              .or(ExploitationObject_.compte.contains(compte))
              .and(ExploitationObject_.variete_id.equals(int.parse(VarieteId)))
              .and(ExploitationObject_.annne_id.equals(int.parse(AnneeId))))
          .build();
      mesExploitations = query.find();
      print('--- mesExploitations AnneeId != '
          ' && VarieteId != '
          ' ---- ${mesExploitations}');
      query.close();
      // return mesExploitations;
    }
    if (AnneeId.isNotEmpty && VarieteId.isEmpty) {
      Query<ExploitationObject> query = exploitationBox!
          .query(ExploitationObject_.compte
              .contains(compte.toLowerCase())
              .or(ExploitationObject_.compte.contains(compte.toUpperCase()))
              .or(ExploitationObject_.compte.contains(compte))
              .and(ExploitationObject_.annne_id.equals(int.parse(AnneeId))))
          .build();
      mesExploitations = query.find();
      print('--- mesExploitations ---- AnneeId != '
          ' && VarieteId == '
          ' ${mesExploitations}');
      query.close();
      // return mesExploitations;
    }
    if (AnneeId.isEmpty && VarieteId.isNotEmpty) {
      Query<ExploitationObject> query = exploitationBox!
          .query(ExploitationObject_.compte
              .contains(compte.toLowerCase())
              .or(ExploitationObject_.compte.contains(compte.toUpperCase()))
              .or(ExploitationObject_.compte.contains(compte))
              .and(ExploitationObject_.variete_id.equals(int.parse(VarieteId))))
          .build();
      mesExploitations = query.find();
      print('--- mesExploitations ---- AnneeId == '
          ' && VarieteId == '
          ' ${mesExploitations}');
      query.close();
      // return mesExploitations;
    }
    return mesExploitations;
  }
}
