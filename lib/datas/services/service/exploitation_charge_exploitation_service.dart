import '../../../features/features.dart';
import '../../../models/models.dart';

/*
  int id;
  DateTime date;
  String unite;
  double pu;
  double quantite;
  double valeur;
  String? observation;
  int charge_exploitation_id;
  String charge_exploitation_name;
  int type_charge_exploitation_id;
  String type_charge_exploitation_name;
  int famille_exploitation_id;
  String famille_charge_exploitation_name;
  int exploitation_id;
*/

class ExploitationChargeExploitationService {
  Future<List<ExploitationChargeExploitationObject>> getECEidExploitation(
      int idExploitation) async {
    final exploitationsBox = ObjectBox.exploitationsBox;
    final chargeExploitationsBox = ObjectBox.chargeExploitationsBox;

    final queryExploitations = exploitationsBox!
        .query(ExploitationObject_.id.equals(idExploitation))
        .build();

    final idProduit = queryExploitations.find().first.produit_id;
    queryExploitations.close();

    final queryChargeExploitations = chargeExploitationsBox!
        .query(ChargeExploitationObject_.produit_id.equals(idProduit))
        .build();
    final mesChargeExploitationsBox = queryChargeExploitations.find();
    queryChargeExploitations.close();

    List<ExploitationChargeExploitationObject>
        ListExploitationChargeExploitationObject = [];

    for (var element in mesChargeExploitationsBox) {
      ExploitationChargeExploitationObject MonObjet =
          ExploitationChargeExploitationObject(
        id: 0,
        unite: element.unite.toString(),
        date: DateTime.now(),
        pu: 0,
        quantite: 0,
        valeur: 0,
        observation: '',
        charge_exploitation_id: int.parse(element.id.toString()),
        charge_exploitation_name: element.name,
        type_charge_exploitation_id:
            int.parse(element.type_charge_exploitation_id.toString()),
        type_charge_exploitation_name: element.type_charge_exploitation_name,
        famille_exploitation_id:
            int.parse(element.famille_charge_exploitation_id.toString()),
        famille_charge_exploitation_name:
            element.famille_charge_exploitation_name,
        exploitation_id: int.parse(idExploitation.toString()),
      );

      final exploitationChargeExploitationBox =
          ObjectBox.exploitationChargeExploitationBox;
      final queryECE = exploitationChargeExploitationBox!
          .query(ExploitationChargeExploitationObject_.exploitation_id
              .equals(idExploitation)
              .and(ExploitationChargeExploitationObject_.charge_exploitation_id
                  .equals(element.id)))
          .build();
      final mesExploitationChargeExploitationBox = queryECE.find();
      queryECE.close();

      if (mesExploitationChargeExploitationBox.length > 0) {
        MonObjet.id = mesExploitationChargeExploitationBox.first.id;
        MonObjet.quantite = mesExploitationChargeExploitationBox.first.quantite;
        MonObjet.pu = mesExploitationChargeExploitationBox.first.pu;

        MonObjet.date = DateTime.parse(
            mesExploitationChargeExploitationBox.first.date.toString());

        double pu = MonObjet.pu.toString().isNotEmpty
            ? double.parse(MonObjet.pu.toString())
            : 0;
        double quantite = MonObjet.quantite.toString().isNotEmpty
            ? double.parse(MonObjet.quantite.toString())
            : 0;
        double produit = pu * quantite;
        MonObjet.valeur = produit;
      }
      ListExploitationChargeExploitationObject.add(MonObjet);
    }
    return ListExploitationChargeExploitationObject;
  }

  Future<List<ExploitationChargeExploitationObject>>
      getECEidProduitidTypeCharge(int idProduit, int idTypeChargeExploitation,
          int idExploitation) async {
    final chargeExploitationsBox = ObjectBox.chargeExploitationsBox;

    final query = chargeExploitationsBox!
        .query(ChargeExploitationObject_.type_charge_exploitation_id
            .equals(idTypeChargeExploitation)
            .and(ChargeExploitationObject_.produit_id.equals(idProduit)))
        .build();
    final mesChargeExploitationsBox = query.find();
    query.close();

    List<ExploitationChargeExploitationObject>
        ListExploitationChargeExploitationObject = [];

    for (var element in mesChargeExploitationsBox) {
      ExploitationChargeExploitationObject MonObjet =
          ExploitationChargeExploitationObject(
        id: 0,
        unite: element.unite.toString(),
        // date: DateTime.parse(item.date.toString()),
        date: DateTime.now(),
        pu: 0,
        quantite: 0,
        valeur: 0,
        observation: '',
        charge_exploitation_id: int.parse(element.id.toString()),
        charge_exploitation_name: element.name,
        type_charge_exploitation_id:
            int.parse(element.type_charge_exploitation_id.toString()),
        type_charge_exploitation_name: element.type_charge_exploitation_name,
        famille_exploitation_id:
            int.parse(element.famille_charge_exploitation_id.toString()),
        famille_charge_exploitation_name:
            element.famille_charge_exploitation_name,
        exploitation_id: int.parse(idExploitation.toString()),
      );

      final exploitationChargeExploitationBox =
          ObjectBox.exploitationChargeExploitationBox;
      final quer = exploitationChargeExploitationBox!
          .query(ExploitationChargeExploitationObject_.exploitation_id
              .equals(idExploitation)
              .and(ExploitationChargeExploitationObject_.charge_exploitation_id
                  .equals(element.id)))
          .build();
      final mesExploitationChargeExploitationBox = quer.find();

      if (mesExploitationChargeExploitationBox.length > 0) {
        MonObjet.id = mesExploitationChargeExploitationBox.first.id;
        MonObjet.quantite = mesExploitationChargeExploitationBox.first.quantite;
        MonObjet.pu = mesExploitationChargeExploitationBox.first.pu;

        MonObjet.date = DateTime.parse(
            mesExploitationChargeExploitationBox.first.date.toString());

        double pu = MonObjet.pu.toString().isNotEmpty
            ? double.parse(MonObjet.pu.toString())
            : 0;
        double quantite = MonObjet.quantite.toString().isNotEmpty
            ? double.parse(MonObjet.quantite.toString())
            : 0;
        double produit = pu * quantite;
        MonObjet.valeur = produit;
      }
      ListExploitationChargeExploitationObject.add(MonObjet);
    }
    return ListExploitationChargeExploitationObject;
  }
}
